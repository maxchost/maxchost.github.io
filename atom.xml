<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Topdog的博客</title>
  
  <subtitle>心有猛虎，细嗅蔷薇!</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-18T16:38:42.632Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>雨后初霁</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018安恒赛 9月</title>
    <link href="http://example.com/2022/05/19/2018%E5%AE%89%E6%81%92%E8%B5%9B-9%E6%9C%88/"/>
    <id>http://example.com/2022/05/19/2018%E5%AE%89%E6%81%92%E8%B5%9B-9%E6%9C%88/</id>
    <published>2022-05-18T16:38:09.000Z</published>
    <updated>2022-05-18T16:38:42.632Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018年安恒杯RE"><a href="#2018年安恒杯RE" class="headerlink" title="2018年安恒杯RE"></a>2018年安恒杯RE</h1><p>NewDriver</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518232222832.png" alt="image-20220518232222832"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518232253211.png" alt="image-20220518232253211"></p><p>先找密文</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518234004594.png" alt="image-20220518234004594"></p><p>进一个关键函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518234052923.png" alt="image-20220518234052923"></p><p>猜一手base64，发现被魔改了。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518235329089.png" alt="image-20220518235329089"></p><p>动态调试了一下，发现函数恢复了</p><p>逻辑判断一下</p><p>先对flag进行base64加密</p><p>然后对a2进行操作，可以动态调出a1的值，key=a1</p><p>然后拿着key和加密后的flag进行操作</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220519003128214.png" alt="image-20220519003128214"></p><p>RC4加密</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220519002941566.png" alt="image-20220519002941566"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">key=[<span class="number">102</span>,  <span class="number">50</span>, <span class="number">202</span>, <span class="number">160</span>, <span class="number">191</span>, <span class="number">152</span>,  <span class="number">45</span>, <span class="number">118</span>, <span class="number">241</span>,  <span class="number">89</span>, </span><br><span class="line">   <span class="number">42</span>,  <span class="number">74</span>, <span class="number">244</span>,  <span class="number">48</span>, <span class="number">173</span>, <span class="number">210</span>,  <span class="number">29</span>,   <span class="number">2</span>, <span class="number">216</span>,  <span class="number">35</span>, </span><br><span class="line">  <span class="number">137</span>,  <span class="number">93</span>, <span class="number">131</span>,  <span class="number">56</span>,   <span class="number">9</span>, <span class="number">242</span>, <span class="number">116</span>, <span class="number">101</span>,  <span class="number">64</span>,  <span class="number">25</span>, </span><br><span class="line">  <span class="number">198</span>, <span class="number">221</span>,  <span class="number">24</span>, <span class="number">211</span>, <span class="number">143</span>, <span class="number">108</span>, <span class="number">139</span>, <span class="number">192</span>, <span class="number">197</span>,  <span class="number">84</span>, </span><br><span class="line">   <span class="number">46</span>, <span class="number">129</span>,  <span class="number">16</span>, <span class="number">196</span>,  <span class="number">38</span>,  <span class="number">86</span>,  <span class="number">95</span>,  <span class="number">83</span>, <span class="number">128</span>,  <span class="number">67</span>, </span><br><span class="line">   <span class="number">39</span>,  <span class="number">98</span>, <span class="number">234</span>,  <span class="number">61</span>, <span class="number">230</span>,   <span class="number">0</span>, <span class="number">231</span>, <span class="number">183</span>,  <span class="number">80</span>, <span class="number">148</span>, </span><br><span class="line">  <span class="number">144</span>,  <span class="number">76</span>,  <span class="number">63</span>, <span class="number">157</span>,   <span class="number">7</span>, <span class="number">224</span>, <span class="number">163</span>, <span class="number">156</span>,  <span class="number">78</span>,  <span class="number">15</span>, </span><br><span class="line">  <span class="number">159</span>, <span class="number">254</span>,  <span class="number">91</span>, <span class="number">142</span>, <span class="number">222</span>, <span class="number">136</span>, <span class="number">114</span>,  <span class="number">47</span>, <span class="number">193</span>, <span class="number">103</span>, </span><br><span class="line">   <span class="number">49</span>, <span class="number">112</span>, <span class="number">141</span>, <span class="number">253</span>, <span class="number">190</span>, <span class="number">100</span>, <span class="number">195</span>, <span class="number">189</span>, <span class="number">107</span>, <span class="number">122</span>, </span><br><span class="line">  <span class="number">207</span>,  <span class="number">12</span>,  <span class="number">52</span>,  <span class="number">31</span>, <span class="number">111</span>,   <span class="number">1</span>, <span class="number">240</span>, <span class="number">124</span>,  <span class="number">94</span>, <span class="number">164</span>, </span><br><span class="line">   <span class="number">30</span>,  <span class="number">73</span>, <span class="number">140</span>, <span class="number">117</span>,  <span class="number">28</span>, <span class="number">227</span>,  <span class="number">32</span>,  <span class="number">72</span>,  <span class="number">40</span>, <span class="number">121</span>, </span><br><span class="line">  <span class="number">165</span>, <span class="number">127</span>, <span class="number">245</span>, <span class="number">236</span>,  <span class="number">79</span>, <span class="number">120</span>,  <span class="number">88</span>,  <span class="number">17</span>, <span class="number">247</span>, <span class="number">205</span>, </span><br><span class="line">  <span class="number">145</span>,  <span class="number">19</span>, <span class="number">252</span>, <span class="number">184</span>,  <span class="number">44</span>,   <span class="number">4</span>, <span class="number">238</span>, <span class="number">213</span>,   <span class="number">8</span>,  <span class="number">68</span>, </span><br><span class="line">  <span class="number">169</span>, <span class="number">225</span>, <span class="number">177</span>,  <span class="number">66</span>, <span class="number">132</span>,  <span class="number">41</span>, <span class="number">167</span>,  <span class="number">71</span>, <span class="number">151</span>, <span class="number">126</span>, </span><br><span class="line">  <span class="number">232</span>, <span class="number">179</span>,  <span class="number">96</span>,  <span class="number">11</span>, <span class="number">249</span>,  <span class="number">75</span>,  <span class="number">60</span>, <span class="number">119</span>,  <span class="number">23</span>,   <span class="number">3</span>, </span><br><span class="line">  <span class="number">130</span>, <span class="number">105</span>, <span class="number">135</span>, <span class="number">212</span>, <span class="number">149</span>,  <span class="number">26</span>,  <span class="number">51</span>,  <span class="number">37</span>, <span class="number">110</span>, <span class="number">204</span>, </span><br><span class="line">  <span class="number">214</span>, <span class="number">187</span>, <span class="number">153</span>, <span class="number">176</span>, <span class="number">133</span>,  <span class="number">65</span>, <span class="number">178</span>,  <span class="number">13</span>, <span class="number">219</span>,  <span class="number">53</span>, </span><br><span class="line">   <span class="number">59</span>,  <span class="number">92</span>, <span class="number">248</span>, <span class="number">237</span>, <span class="number">158</span>, <span class="number">166</span>, <span class="number">150</span>,  <span class="number">57</span>,  <span class="number">99</span>,  <span class="number">10</span>, </span><br><span class="line">   <span class="number">27</span>, <span class="number">147</span>,  <span class="number">33</span>,  <span class="number">70</span>,  <span class="number">18</span>, <span class="number">208</span>, <span class="number">180</span>,  <span class="number">34</span>,  <span class="number">81</span>, <span class="number">201</span>, </span><br><span class="line">   <span class="number">97</span>, <span class="number">209</span>,  <span class="number">43</span>, <span class="number">170</span>,  <span class="number">69</span>,   <span class="number">6</span>,   <span class="number">5</span>, <span class="number">206</span>, <span class="number">250</span>, <span class="number">146</span>, </span><br><span class="line">  <span class="number">104</span>, <span class="number">171</span>,  <span class="number">54</span>, <span class="number">218</span>, <span class="number">200</span>, <span class="number">226</span>,  <span class="number">55</span>, <span class="number">217</span>, <span class="number">162</span>,  <span class="number">90</span>, </span><br><span class="line">  <span class="number">215</span>, <span class="number">106</span>, <span class="number">181</span>, <span class="number">255</span>, <span class="number">233</span>, <span class="number">186</span>,  <span class="number">82</span>,  <span class="number">21</span>, <span class="number">246</span>, <span class="number">188</span>, </span><br><span class="line">  <span class="number">154</span>, <span class="number">182</span>, <span class="number">239</span>, <span class="number">109</span>, <span class="number">203</span>,  <span class="number">77</span>, <span class="number">174</span>, <span class="number">228</span>, <span class="number">161</span>, <span class="number">172</span>, </span><br><span class="line">  <span class="number">235</span>,  <span class="number">14</span>, <span class="number">113</span>, <span class="number">123</span>, <span class="number">243</span>,  <span class="number">36</span>, <span class="number">194</span>, <span class="number">251</span>, <span class="number">125</span>, <span class="number">134</span>, </span><br><span class="line">   <span class="number">85</span>, <span class="number">175</span>,  <span class="number">58</span>, <span class="number">223</span>,  <span class="number">62</span>,  <span class="number">20</span>, <span class="number">185</span>, <span class="number">155</span>,  <span class="number">22</span>, <span class="number">220</span>, </span><br><span class="line">  <span class="number">115</span>,  <span class="number">87</span>, <span class="number">229</span>, <span class="number">199</span>, <span class="number">138</span>, <span class="number">168</span>]</span><br><span class="line">enc=[<span class="number">32</span>, <span class="number">195</span>,  <span class="number">26</span>, <span class="number">174</span>, <span class="number">151</span>,  <span class="number">60</span>, <span class="number">122</span>,  <span class="number">65</span>, <span class="number">222</span>, <span class="number">246</span>, </span><br><span class="line">  <span class="number">120</span>,  <span class="number">21</span>, <span class="number">203</span>,  <span class="number">75</span>,  <span class="number">76</span>, <span class="number">220</span>,  <span class="number">38</span>,  <span class="number">85</span>, <span class="number">139</span>,  <span class="number">85</span>, </span><br><span class="line">  <span class="number">229</span>, <span class="number">233</span>,  <span class="number">85</span>, <span class="number">117</span>,  <span class="number">64</span>,  <span class="number">61</span>, <span class="number">130</span>,  <span class="number">19</span>, <span class="number">165</span>,  <span class="number">96</span>, </span><br><span class="line">   <span class="number">19</span>,  <span class="number">59</span>, <span class="number">245</span>, <span class="number">216</span>,  <span class="number">25</span>,  <span class="number">14</span>,  <span class="number">71</span>, <span class="number">207</span>,  <span class="number">95</span>,  <span class="number">94</span>, </span><br><span class="line">  <span class="number">222</span>, <span class="number">157</span>,  <span class="number">20</span>, <span class="number">189</span>]</span><br><span class="line">v4 = <span class="number">0</span></span><br><span class="line">enflag=<span class="string">&#x27;&#x27;</span></span><br><span class="line">v3 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>):</span><br><span class="line">    v3 = (v3 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v6 = key[v3];</span><br><span class="line">    v4 = (v6 + v4) % <span class="number">256</span>;</span><br><span class="line">    key[v3] = key[v4];</span><br><span class="line">    key[v4] = v6;</span><br><span class="line">    enc[i] = enc[i]^key[(v6+key[v3]) % <span class="number">256</span>];</span><br><span class="line">    enflag+=<span class="built_in">chr</span>(enc[i])</span><br><span class="line"><span class="built_in">print</span>(enflag)</span><br></pre></td></tr></table></figure><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220519002625257.png" alt="image-20220519002625257"></p><p>flag{y0u_know_rc4_and_base64_ha$}</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220519003424333.png" alt="image-20220519003424333"></p><p>下一题今天再做，有点晚了睡觉了，</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220519003719605.png" alt="image-20220519003719605"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2018年安恒杯RE&quot;&gt;&lt;a href=&quot;#2018年安恒杯RE&quot; class=&quot;headerlink&quot; title=&quot;2018年安恒杯RE&quot;&gt;&lt;/a&gt;2018年安恒杯RE&lt;/h1&gt;&lt;p&gt;NewDriver&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://tes</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>vm逆向</title>
    <link href="http://example.com/2022/05/18/vm%E9%80%86%E5%90%91/"/>
    <id>http://example.com/2022/05/18/vm%E9%80%86%E5%90%91/</id>
    <published>2022-05-18T06:56:57.000Z</published>
    <updated>2022-05-18T11:16:38.446Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vm逆向"><a href="#vm逆向" class="headerlink" title="vm逆向"></a>vm逆向</h1><p>今天做题遇到了，顺手查了查资料</p><p><strong>总结</strong></p><ol><li>vm类题目有明显的特征：一般情况下，在F5下有while/switch case 这样的语法。</li><li>该题是简单的vm类题目，先通过该题了解一下vm题目的构造，以便在后边遇上vm类题目时可以分辨出题目类型。之后会有相应的vm题目考点以及解决办法的文章。</li></ol><p>在目前的CTF比赛中，虚拟机题目常常有两种考法：</p><p>​    ·给可执行程序和opcode，逆向emulator，结合opcode文件，推出flag</p><p>​    ·只给可执行程序，逆向emulator，构造opcode，读取flag</p><p>​    拿到一个虚拟机之后，一般有以下几个逆向过程：<br>​    ·分析虚拟机入口，搞清虚拟机的输入，或者opcode位置</p><p>​    ·理清虚拟机结构，包括Dispatcher和各个Handler</p><p>​    ·逆向各个Handler，分析opcode的意义</p><p>​     在实际调试中，个人觉得最为关键的是要搞清虚拟机的执行流。调试过程中，在汇编层面调试当然是最基本最直接的方法，但是由于虚拟机Handler可能比较多，调试十分繁琐。若虚拟机内部没有很复杂的代码混淆，可以考虑使用IDA进行源码级调试，这对于快速整理emulator意义很有帮助。再进一步，可以结合IDA反编译伪代码，加上一些宏定义，加入输出，重新编译，可以十分快速的逆向整个emulator执行过程。</p><p>​    目前比赛中，虚拟机题目特点是核心算法不是很复杂，虚拟机本身没有反调试和代码加密混淆的加入。当然，随着整体CTF水平的不断进步，未来虚拟机逆向难度只会越来越高。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518151858403.png" alt="image-20220518151858403"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518152143455.png" alt="image-20220518152143455"></p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>南邮CTF_WxyVM1</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518180706178.png" alt="image-20220518180706178"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518182309621.png" alt="image-20220518182309621"></p><p>进vm</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518182839541.png" alt="image-20220518182839541"></p><p>直接在IDApython    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">auto i;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">14997</span>; i &gt;= <span class="number">0</span>; i = i - <span class="number">3</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    auto v0 = Byte(<span class="number">0x6010C0</span>+i);</span><br><span class="line">    auto v3 = Byte(<span class="number">0x6010C0</span>+(i + <span class="number">2</span>));</span><br><span class="line">    auto result = v0;</span><br><span class="line">    <span class="keyword">if</span>(v0==<span class="number">1</span>)&#123;</span><br><span class="line">        result =Byte(<span class="number">0x6010C0</span>+i + <span class="number">1</span>);</span><br><span class="line">        PatchByte(<span class="number">0x601060</span> + result*<span class="number">4</span>,Byte(<span class="number">0x601060</span> + result*<span class="number">4</span>)-v3);</span><br><span class="line">            &#125;</span><br><span class="line">     <span class="keyword">if</span>(v0==<span class="number">2</span>)&#123;</span><br><span class="line">         result =Byte(<span class="number">0x6010C0</span>+i + <span class="number">1</span>);</span><br><span class="line">       PatchByte(<span class="number">0x601060</span> + result*<span class="number">4</span>,Byte(<span class="number">0x601060</span> + result*<span class="number">4</span>)+v3);</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span>(v0==<span class="number">3</span>)&#123;</span><br><span class="line">        result =Byte(<span class="number">0x6010C0</span>+i + <span class="number">1</span>);</span><br><span class="line">        PatchByte(<span class="number">0x601060</span> + result*<span class="number">4</span>,Byte(<span class="number">0x601060</span> + result*<span class="number">4</span>)^v3);</span><br><span class="line">            &#125;</span><br><span class="line">   <span class="keyword">if</span>(v0==<span class="number">4</span>)&#123;</span><br><span class="line">        result =Byte(<span class="number">0x6010C0</span>+i + <span class="number">1</span>);</span><br><span class="line">        PatchByte(<span class="number">0x601060</span> + result*<span class="number">4</span>,Byte(<span class="number">0x601060</span> + result*<span class="number">4</span>)/v3);</span><br><span class="line">            &#125;</span><br><span class="line">   <span class="keyword">if</span>(v0==<span class="number">5</span>)&#123;</span><br><span class="line">         result =Byte(<span class="number">0x6010C0</span>+i + <span class="number">1</span>);</span><br><span class="line">    PatchByte(<span class="number">0x601060</span> + result*<span class="number">4</span>,Byte(<span class="number">0x601060</span> + result*<span class="number">4</span>)^Byte(<span class="number">0x601060</span>+v3*<span class="number">4</span>));</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">24</span>;i++)</span><br><span class="line">Message(<span class="string">&quot;%c&quot;</span>,Byte(<span class="number">0x601060</span>+i*<span class="number">4</span>))</span><br></pre></td></tr></table></figure><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518184852907.png" alt="image-20220518184852907"></p><p>直接弄。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vm逆向&quot;&gt;&lt;a href=&quot;#vm逆向&quot; class=&quot;headerlink&quot; title=&quot;vm逆向&quot;&gt;&lt;/a&gt;vm逆向&lt;/h1&gt;&lt;p&gt;今天做题遇到了，顺手查了查资料&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;vm类题目有</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>2021Sloth选拔赛</title>
    <link href="http://example.com/2022/05/18/2021Sloth%E9%80%89%E6%8B%94%E8%B5%9B/"/>
    <id>http://example.com/2022/05/18/2021Sloth%E9%80%89%E6%8B%94%E8%B5%9B/</id>
    <published>2022-05-18T02:16:51.000Z</published>
    <updated>2022-05-18T08:26:00.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Guess"><a href="#Guess" class="headerlink" title="Guess"></a>Guess</h2><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518102014702.png" alt="image-20220518102014702"></p><p>花指令，直接nop</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518102050292.png" alt="image-20220518102050292"></p><p>还有几处，全nop了</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518102514412.png" alt="image-20220518102514412"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518102633730.png" alt="image-20220518102633730"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518102644651.png" alt="image-20220518102644651"></p><p>数据dd转成byte</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518102917188.png" alt="image-20220518102917188"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> keyxor[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">68</span>,  <span class="number">51</span>,  <span class="number">34</span>,  <span class="number">17</span>,  <span class="number">85</span>,  <span class="number">68</span>,  <span class="number">51</span>,  <span class="number">34</span>, <span class="number">102</span>,  <span class="number">85</span>, </span><br><span class="line">   <span class="number">68</span>,  <span class="number">51</span>, <span class="number">119</span>, <span class="number">102</span>,  <span class="number">85</span>,  <span class="number">68</span>, <span class="number">136</span>, <span class="number">119</span>, <span class="number">102</span>,  <span class="number">85</span>, </span><br><span class="line">  <span class="number">153</span>, <span class="number">136</span>, <span class="number">119</span>, <span class="number">102</span>,   <span class="number">0</span>, <span class="number">153</span>, <span class="number">136</span>, <span class="number">119</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enflag[] =</span><br><span class="line">&#123;</span><br><span class="line">   <span class="number">34</span>,  <span class="number">95</span>,  <span class="number">67</span>, <span class="number">118</span>,  <span class="number">46</span>,  <span class="number">52</span>,  <span class="number">92</span>,  <span class="number">86</span>,   <span class="number">7</span>,  <span class="number">33</span>, </span><br><span class="line">   <span class="number">55</span>,  <span class="number">92</span>,  <span class="number">40</span>,  <span class="number">21</span>,  <span class="number">58</span>,  <span class="number">27</span>, <span class="number">254</span>,  <span class="number">18</span>,   <span class="number">1</span>,  <span class="number">48</span>, </span><br><span class="line">  <span class="number">237</span>, <span class="number">233</span>,  <span class="number">21</span>,  <span class="number">10</span>, <span class="number">101</span>, <span class="number">184</span>, <span class="number">245</span>, <span class="number">119</span>,   <span class="number">0</span>,   <span class="number">0</span>, </span><br><span class="line">    <span class="number">0</span>,   <span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">32</span>;++i)&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,enflag[i]^keyxor[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>应该是签到题</p><p>考点 花指令的识别与去花，ida的使用</p><h2 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h2><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518103157124.png" alt="image-20220518103157124"></p><p>有壳，直接脱壳</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518103243547.png" alt="image-20220518103243547"></p><p>工具脱壳失败，直接手脱壳，但文件是ELF格式，我环境只支持windows下的文件    ，不支持linux寄了。</p><p>看看题目</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518103552866.png" alt="image-20220518103552866"></p><p>啊这，</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518103612774.png" alt="image-20220518103612774"></p><p>看了提示后发现</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518105928013.png" alt="image-20220518105928013"></p><p>正常来说一个upx加壳文件会出现magic字节</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518110343574.png" alt="image-20220518110343574"></p><p>头部 59 54 53 99 upx的版本信息 0D 0C</p><p>直接搜</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518110431006.png" alt="image-20220518110431006"></p><p>居然没有</p><p>搜upx</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518110752044.png" alt="image-20220518110752044"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518110829132.png" alt="image-20220518110829132"></p><p>发现magic头 </p><p>继而搜索 55 50 58 21</p><p>发现upx少了，必然有魔改upx字节，</p><p>这个时候应该从upx的版本下手</p><p>从上面得知upx版本信息为 0D 16 00 00 00 00 直接搜索</p><p>搜索</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518111538989.png" alt="image-20220518111538989"></p><p>06 22 11 03 就是魔改的upx了，直接改成 55 50 58 21 （upx！）</p><p>修复完成</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518111751556.png" alt="image-20220518111751556"></p><p>好了用ida进行分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518111837252.png" alt="image-20220518111837252"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// r8d</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// r9d</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> v23[<span class="number">2</span>]; <span class="comment">// [rsp+26h] [rbp-Ah] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v24; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v24 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  srandom(<span class="number">8225LL</span>, argv, envp);</span><br><span class="line">  qmemcpy(v23, <span class="string">&quot;+-&quot;</span>, <span class="keyword">sizeof</span>(v23));</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Welcome to EZest RE in the world!!! 0v0&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Please answer all the math probs~&quot;</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;READY...?&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">57004</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = rand();</span><br><span class="line">    v20 = v3 % <span class="number">21</span> + <span class="number">1</span>;</span><br><span class="line">    v18 = <span class="number">2021</span>;</span><br><span class="line">    <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;2021&quot;</span>, (_DWORD)argv, v3 % <span class="number">21</span>, v3 % <span class="number">21</span>, v4, v5, v14);</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v20; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = (<span class="type">int</span>)rand() % <span class="number">21</span>;</span><br><span class="line">      LOBYTE(v22) = rand() &amp; <span class="number">1</span>;</span><br><span class="line">      v22 = (<span class="type">unsigned</span> __int8)v22;</span><br><span class="line">      <span class="built_in">printf</span>((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot; %c %d&quot;</span>, v23[(<span class="type">unsigned</span> __int8)v22], v21, v6, v7, v8, v15);</span><br><span class="line">      <span class="keyword">if</span> ( v22 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">          v18 -= v21;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Are you serious? &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v18 += v21;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">10LL</span>);</span><br><span class="line">    argv = (<span class="type">const</span> <span class="type">char</span> **)&amp;v16;</span><br><span class="line">    _isoc99_scanf((<span class="type">unsigned</span> <span class="type">int</span>)<span class="string">&quot;%d&quot;</span>, (<span class="type">unsigned</span> <span class="type">int</span>)&amp;v16, v9, v10, v11, v12, v15);</span><br><span class="line">    <span class="keyword">if</span> ( v18 != v16 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;Try again and try again~ &quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;OK! &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Congratulations! Get your flag as \&quot;flag&#123;\&quot;+md5(str(answer1)+str(answer2)+...).hexdigest()+\&quot;&#125;\&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大写md5，足足回答57004次</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518113018549.png"></p><p>给了随机种子</p><p>模拟一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// er9</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// er9</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// edx</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// ecx</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// er8</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// er9</span></span><br><span class="line">  <span class="type">char</span> v14; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">char</span> v15; <span class="comment">// [rsp+0h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+8h] [rbp-28h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v18; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> v20; <span class="comment">// [rsp+18h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> v21; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  <span class="type">int</span> v22; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  <span class="type">char</span> v23[<span class="number">2</span>]; <span class="comment">// [rsp+26h] [rbp-Ah]</span></span><br><span class="line"></span><br><span class="line">  srandom(<span class="number">8225</span>);</span><br><span class="line">  v23[<span class="number">0</span>] = <span class="number">43</span>;</span><br><span class="line">  v23[<span class="number">1</span>] = <span class="number">45</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">57004</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = rand();</span><br><span class="line">    v20 = v3 % <span class="number">21</span> + <span class="number">1</span>;</span><br><span class="line">    v18 = <span class="number">2021</span>;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v20; ++j )</span><br><span class="line">    &#123;</span><br><span class="line">      v21 = (<span class="type">int</span>)rand() % <span class="number">21</span>;</span><br><span class="line">      v22 = rand() &amp; <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v22 )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v22 == <span class="number">1</span> )</span><br><span class="line">          v18 -= v21;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          <span class="built_in">puts</span>(<span class="string">&quot;Are you serious? &quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v18 += v21;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, v18);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>flag{474a444e5d6cb14261e8408e891ac1b8}</strong></p><h2 id="babyvm"><a href="#babyvm" class="headerlink" title="babyvm"></a>babyvm</h2><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518121836811.png" alt="image-20220518121836811"></p><p>考点：vm逆向</p><p>opcode里面存的大概是 指令</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518152758238.png" alt="image-20220518152758238"></p><p>对指令逐条分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518152910871.png" alt="image-20220518152910871"></p><p>不难看出，一旦opcode取出的是0，程序直接退出</p><p>我们构建指令集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0x00</span>:[<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;exit&quot;</span>]</span><br></pre></td></tr></table></figure><p>接着向下分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518153210262.png" alt="image-20220518153210262"></p><p>在switch中</p><p>一个一个分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518153257467.png" alt="image-20220518153257467"></p><p>相当于 mov  寄存器，数值</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518153813933.png" alt="image-20220518153813933"></p><p>mov 寄存器，另一个寄存器</p><p>挨个分析</p><p>官方EXP</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">ins_set=&#123;</span><br><span class="line">    <span class="number">0x00</span>:[<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;exit&quot;</span>],</span><br><span class="line">    <span class="number">0x01</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;mov r&#123;0&#125;,0x&#123;1:0&gt;2X&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x11</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;mov r&#123;0&#125;,r&#123;1&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x21</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;mov [r&#123;0&#125;],0x&#123;1:0&gt;2X&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x31</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;mov [r&#123;0&#125;],r&#123;1&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x02</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;inc r&#123;0&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x03</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;push r&#123;0&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x04</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;pop r&#123;0&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x05</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;r&#123;0&#125; = getchar()&quot;</span>],</span><br><span class="line">    <span class="number">0x06</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;putchar(r&#123;0&#125;)&quot;</span>],</span><br><span class="line">    <span class="number">0x07</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;cmp r&#123;0&#125;,0x&#123;1:0&gt;2X&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x17</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;cmp [r&#123;0&#125;],[r&#123;1&#125;]&quot;</span>],</span><br><span class="line">    <span class="number">0x08</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;jnz &#123;0:0&gt;4&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x18</span>:[<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;jmp &#123;0:0&gt;4&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x09</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;xor [r&#123;0&#125;],0x&#123;1:0&gt;2X&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x19</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;xor [r&#123;0&#125;],r&#123;1&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x0A</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;add [r&#123;0&#125;],0x&#123;1:0&gt;2X&#125;&quot;</span>],</span><br><span class="line">    <span class="number">0x0B</span>:[<span class="number">3</span>,<span class="number">2</span>,<span class="string">&quot;sub r&#123;0&#125;,0x&#123;1:0&gt;2X&#125;&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line">opcode=\</span><br><span class="line">[<span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x0A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x7D</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x5A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x1D</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x17</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x79</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x56</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x7E</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x0F</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x1A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x63</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x1F</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x1E</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x48</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x1A</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x11</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x69</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x1F</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x44</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x19</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x01</span>, <span class="number">0x0E</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x57</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x68</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x61</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x69</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x73</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x79</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x6F</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x75</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x72</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x66</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x6C</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x61</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x3F</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x0A</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x08</span>, <span class="number">0xF5</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x0A</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x08</span>, <span class="number">0xF6</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x31</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x08</span>, <span class="number">0xF3</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x11</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0x19</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x08</span>, <span class="number">0xF0</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x0A</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x08</span>, <span class="number">0xF6</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x20</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0xCC</span>, <span class="number">0x17</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x08</span>, <span class="number">0x2E</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x07</span>, <span class="number">0x01</span>, <span class="number">0x20</span>, <span class="number">0x08</span>, <span class="number">0xEF</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x52</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x69</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x68</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x0A</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x18</span>, <span class="number">0x23</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x57</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x72</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x6F</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x0A</span>, <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x00</span>]</span><br><span class="line">pc=<span class="number">0</span></span><br><span class="line">res=[<span class="string">&quot;Addr          Code\n&quot;</span>]</span><br><span class="line">addrfmt=<span class="string">&quot;&#123;0:0&gt;4&#125;    &quot;</span></span><br><span class="line"><span class="keyword">while</span> pc&lt;<span class="built_in">len</span>(opcode):</span><br><span class="line">    i=pc</span><br><span class="line">    pc+=ins_set[opcode[i]][<span class="number">0</span>]</span><br><span class="line">    res.<span class="built_in">append</span>(addrfmt.format(i))</span><br><span class="line">    <span class="keyword">if</span> opcode[i] <span class="keyword">not</span> in ins_set.<span class="built_in">keys</span>(): #如果指令集中不存在该opcode</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[-] UknOpcode 0x&#123;0:X&#125; in addr 0x&#123;1:0&gt;8X&#125;.\n&quot;</span>.format(opcode[i],i))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    elif opcode[i]==<span class="number">0x08</span> <span class="keyword">or</span> opcode[i]==<span class="number">0x18</span>:</span><br><span class="line">        jmpdelta=opcode[i+<span class="number">1</span>] <span class="keyword">if</span> opcode[i+<span class="number">1</span>]&amp;<span class="number">0x80</span>==<span class="number">0</span> <span class="keyword">else</span> opcode[i+<span class="number">1</span>]<span class="number">-256</span></span><br><span class="line">        res.<span class="built_in">append</span>(ins_set[opcode[i]][<span class="number">2</span>].format(pc+jmpdelta)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>: #一般opcode的处理</span><br><span class="line">        args=[]</span><br><span class="line">        <span class="keyword">for</span> j in <span class="built_in">range</span>(ins_set[opcode[i]][<span class="number">1</span>]):</span><br><span class="line">            args.<span class="built_in">append</span>(opcode[i+<span class="number">1</span>+j])</span><br><span class="line">        res.<span class="built_in">append</span>(ins_set[opcode[i]][<span class="number">2</span>].format(*args)+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> opcode[i]==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">with <span class="built_in">open</span>(<span class="string">&#x27;res.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">    f.<span class="built_in">writelines</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>res.txt中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">Addr          Code</span><br><span class="line">0000    mov r1,0x00</span><br><span class="line">0003    mov [r1],0x0A</span><br><span class="line">0006    inc r1</span><br><span class="line">0008    mov [r1],0x01</span><br><span class="line">0011    inc r1</span><br><span class="line">0013    mov [r1],0x0F</span><br><span class="line">0016    inc r1</span><br><span class="line">0018    mov [r1],0x08</span><br><span class="line">0021    inc r1</span><br><span class="line">0023    mov [r1],0x13</span><br><span class="line">0026    inc r1</span><br><span class="line">0028    mov [r1],0x7D</span><br><span class="line">0031    inc r1</span><br><span class="line">0033    mov [r1],0x5A</span><br><span class="line">0036    inc r1</span><br><span class="line">0038    mov [r1],0x1D</span><br><span class="line">0041    inc r1</span><br><span class="line">0043    mov [r1],0x01</span><br><span class="line">0046    inc r1</span><br><span class="line">0048    mov [r1],0x17</span><br><span class="line">0051    inc r1</span><br><span class="line">0053    mov [r1],0x79</span><br><span class="line">0056    inc r1</span><br><span class="line">0058    mov [r1],0x56</span><br><span class="line">0061    inc r1</span><br><span class="line">0063    mov [r1],0x13</span><br><span class="line">0066    inc r1</span><br><span class="line">0068    mov [r1],0x7E</span><br><span class="line">0071    inc r1</span><br><span class="line">0073    mov [r1],0x0F</span><br><span class="line">0076    inc r1</span><br><span class="line">0078    mov [r1],0x1A</span><br><span class="line">0081    inc r1</span><br><span class="line">0083    mov [r1],0x63</span><br><span class="line">0086    inc r1</span><br><span class="line">0088    mov [r1],0x1F</span><br><span class="line">0091    inc r1</span><br><span class="line">0093    mov [r1],0x11</span><br><span class="line">0096    inc r1</span><br><span class="line">0098    mov [r1],0x06</span><br><span class="line">0101    inc r1</span><br><span class="line">0103    mov [r1],0x1E</span><br><span class="line">0106    inc r1</span><br><span class="line">0108    mov [r1],0x0B</span><br><span class="line">0111    inc r1</span><br><span class="line">0113    mov [r1],0x13</span><br><span class="line">0116    inc r1</span><br><span class="line">0118    mov [r1],0x48</span><br><span class="line">0121    inc r1</span><br><span class="line">0123    mov [r1],0x1A</span><br><span class="line">0126    inc r1</span><br><span class="line">0128    mov [r1],0x11</span><br><span class="line">0131    inc r1</span><br><span class="line">0133    mov [r1],0x69</span><br><span class="line">0136    inc r1</span><br><span class="line">0138    mov [r1],0x1F</span><br><span class="line">0141    inc r1</span><br><span class="line">0143    mov [r1],0x44</span><br><span class="line">0146    inc r1</span><br><span class="line">0148    mov [r1],0x19</span><br><span class="line">0151    inc r1</span><br><span class="line">0153    mov [r1],0x13</span><br><span class="line">0156    inc r1</span><br><span class="line">0158    mov [r1],0x0E</span><br><span class="line">0161    inc r1</span><br><span class="line">0163    mov r1,0x57</span><br><span class="line">0166    putchar(r1)</span><br><span class="line">0168    mov r1,0x68</span><br><span class="line">0171    putchar(r1)</span><br><span class="line">0173    mov r1,0x61</span><br><span class="line">0176    putchar(r1)</span><br><span class="line">0178    mov r1,0x74</span><br><span class="line">0181    putchar(r1)</span><br><span class="line">0183    mov r1,0x20</span><br><span class="line">0186    putchar(r1)</span><br><span class="line">0188    mov r1,0x69</span><br><span class="line">0191    putchar(r1)</span><br><span class="line">0193    mov r1,0x73</span><br><span class="line">0196    putchar(r1)</span><br><span class="line">0198    mov r1,0x20</span><br><span class="line">0201    putchar(r1)</span><br><span class="line">0203    mov r1,0x79</span><br><span class="line">0206    putchar(r1)</span><br><span class="line">0208    mov r1,0x6F</span><br><span class="line">0211    putchar(r1)</span><br><span class="line">0213    mov r1,0x75</span><br><span class="line">0216    putchar(r1)</span><br><span class="line">0218    mov r1,0x72</span><br><span class="line">0221    putchar(r1)</span><br><span class="line">0223    mov r1,0x20</span><br><span class="line">0226    putchar(r1)</span><br><span class="line">0228    mov r1,0x66</span><br><span class="line">0231    putchar(r1)</span><br><span class="line">0233    mov r1,0x6C</span><br><span class="line">0236    putchar(r1)</span><br><span class="line">0238    mov r1,0x61</span><br><span class="line">0241    putchar(r1)</span><br><span class="line">0243    mov r1,0x67</span><br><span class="line">0246    putchar(r1)</span><br><span class="line">0248    mov r1,0x3F</span><br><span class="line">0251    putchar(r1)</span><br><span class="line">0253    mov r1,0x0A</span><br><span class="line">0256    putchar(r1)</span><br><span class="line">0258    mov r1,0x00 //重置</span><br><span class="line">0261    r2 = getchar()  //应该是获取flag</span><br><span class="line">0263    push r2    </span><br><span class="line">0265    inc r1</span><br><span class="line">0267    cmp r1,0x20</span><br><span class="line">0270    jnz 0261</span><br><span class="line">0272    mov r1,0x00</span><br><span class="line">0275    add [r1],0x40  //之前存的数据加64 enflag[i]+=64</span><br><span class="line">0278    inc r1</span><br><span class="line">0280    cmp r1,0x20</span><br><span class="line">0283    jnz 0275   </span><br><span class="line">0285    mov r1,0x40</span><br><span class="line">0288    pop r2</span><br><span class="line">0290    sub r1,0x01   //存flag，出栈存问题不大</span><br><span class="line">0293    mov [r1],r2</span><br><span class="line">0296    cmp r1,0x20</span><br><span class="line">0299    jnz 0288   //用一个循坏 32位flag存下</span><br><span class="line">0301    mov r1,0x20</span><br><span class="line">0304    mov r2,r1</span><br><span class="line">0307    sub r2,0x20</span><br><span class="line">0310    xor [r1],r2</span><br><span class="line">0313    inc r1</span><br><span class="line">0315    cmp r1,0x40</span><br><span class="line">0318    jnz 0304     //flag每个位置异或i flag[i]^=i;</span><br><span class="line">0320    mov r1,0x20</span><br><span class="line">0323    add [r1],0x20  //flag[i]+32</span><br><span class="line">0326    inc r1</span><br><span class="line">0328    cmp r1,0x40</span><br><span class="line">0331    jnz 0323</span><br><span class="line">0333    mov r1,0x00</span><br><span class="line">0336    mov r2,0x20</span><br><span class="line">0339    xor [r1],0xCC //把之前的数据异或0xcc  enflag[i]^=0xcc</span><br><span class="line">0342    cmp [r1],[r2] //进行比较 enflag[i] == flag[i]</span><br><span class="line">0345    jnz 0393</span><br><span class="line">0347    inc r1</span><br><span class="line">0349    inc r2</span><br><span class="line">0351    cmp r1,0x20 </span><br><span class="line">0354    jnz 0339  //循坏</span><br><span class="line">0356    mov r1,0x52</span><br><span class="line">0359    putchar(r1)</span><br><span class="line">0361    mov r1,0x69</span><br><span class="line">0364    putchar(r1)</span><br><span class="line">0366    mov r1,0x67</span><br><span class="line">0369    putchar(r1)</span><br><span class="line">0371    mov r1,0x68</span><br><span class="line">0374    putchar(r1)</span><br><span class="line">0376    mov r1,0x74</span><br><span class="line">0379    putchar(r1)</span><br><span class="line">0381    mov r1,0x21</span><br><span class="line">0384    putchar(r1)</span><br><span class="line">0386    mov r1,0x0A</span><br><span class="line">0389    putchar(r1)</span><br><span class="line">0391    jmp 0428</span><br><span class="line">0393    mov r1,0x57</span><br><span class="line">0396    putchar(r1)</span><br><span class="line">0398    mov r1,0x72</span><br><span class="line">0401    putchar(r1)</span><br><span class="line">0403    mov r1,0x6F</span><br><span class="line">0406    putchar(r1)</span><br><span class="line">0408    mov r1,0x6E</span><br><span class="line">0411    putchar(r1)</span><br><span class="line">0413    mov r1,0x67</span><br><span class="line">0416    putchar(r1)</span><br><span class="line">0418    mov r1,0x21</span><br><span class="line">0421    putchar(r1)</span><br><span class="line">0423    mov r1,0x0A</span><br><span class="line">0426    putchar(r1)</span><br><span class="line">0428    exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析汇编，都写注释里面了</p><p>总结成这段汇编的伪代码逻辑就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;++i)</span><br><span class="line"><span class="keyword">if</span>(((enflag[i]+<span class="number">64</span>)^<span class="number">0xcc</span>)!=(flag[i]^i+<span class="number">32</span>)</span><br><span class="line">&#123; <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们逆向就可以拿到flag了</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220518162005866.png" alt="image-20220518162005866"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">int</span> enflag[]=&#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">19</span>, <span class="number">125</span>, <span class="number">90</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">23</span>, <span class="number">121</span>, <span class="number">86</span>, <span class="number">19</span>, <span class="number">126</span>, <span class="number">15</span>, <span class="number">26</span>, <span class="number">99</span>, <span class="number">31</span>, <span class="number">17</span>, <span class="number">6</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">19</span>, <span class="number">72</span>, <span class="number">26</span>, <span class="number">17</span>, <span class="number">105</span>, <span class="number">31</span>, <span class="number">68</span>, <span class="number">25</span>, <span class="number">19</span>, <span class="number">14</span>&#125;;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">32</span>;i++)&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,(((enflag[i]+<span class="number">64</span>)^<span class="number">0xcc</span>)<span class="number">-32</span>)^i);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="复盘"><a href="#复盘" class="headerlink" title="复盘"></a>复盘</h1><p>这次学到upx的magic头与交互模式的模拟</p><p>花指令的call系列</p><p>从call 到retn 全部nop 大部分是这样，但有时要关注一下有没有一些东西后面要用</p><h2 id="考点1"><a href="#考点1" class="headerlink" title="考点1"></a>考点1</h2><p>利用upx的版本信息巧妙定位魔改的upx！，使其恢复，进行工具脱壳</p><h2 id="考点2"><a href="#考点2" class="headerlink" title="考点2"></a>考点2</h2><p>vm虚拟机逆向</p><p>comand与opcode结合，逐条分析每条语句进行，写出指令集。恢复汇编逻辑</p><p>然后通过汇编进行复盘</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Reverse&quot;&gt;&lt;a href=&quot;#Reverse&quot; class=&quot;headerlink&quot; title=&quot;Reverse&quot;&gt;&lt;/a&gt;Reverse&lt;/h1&gt;&lt;h2 id=&quot;Guess&quot;&gt;&lt;a href=&quot;#Guess&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>常见花指令</title>
    <link href="http://example.com/2022/05/18/%E5%B8%B8%E8%A7%81%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <id>http://example.com/2022/05/18/%E5%B8%B8%E8%A7%81%E8%8A%B1%E6%8C%87%E4%BB%A4/</id>
    <published>2022-05-17T16:01:52.000Z</published>
    <updated>2022-05-17T16:07:12.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见-跳转地址-常数"><a href="#常见-跳转地址-常数" class="headerlink" title="常见 跳转地址+常数"></a>常见 跳转地址+常数</h1><p>[NSSRound#3 Team]jump_by_jump</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517235431691.png" alt="image-20220517235431691"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517235507138.png" alt="image-20220517235507138"></p><p>jz 和jnz 也就是无论zf位是否为0，都会跳转，但是发现有个地址+1</p><p>而且下面call的地址 太大，不正常</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517235644410.png" alt="image-20220517235644410"></p><p>恢复正常，把多余的数据直接nop</p><p>这个就是脏字节了，因为ida会把这个数据识别成函数头</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517235757225.png" alt="image-20220517235757225"></p><p>逻辑就恢复了</p><h1 id="call-5模式"><a href="#call-5模式" class="headerlink" title="call $+5模式"></a>call $+5模式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...:00815023 038 E8 00 00 00 00          call    $+5</span><br><span class="line">...:00815028 03C 55                      push    ebp</span><br><span class="line">...:00815029 040 8B EC                   mov     ebp, esp</span><br><span class="line">...:0081502B                             db      36h</span><br><span class="line">...:0081502B 040 36 83 45 04 0A          add     dword ptr [ebp+4], 0Ah</span><br><span class="line">...:00815030 040 5D                      pop     ebp</span><br><span class="line">...:00815031 03C C3                      retn</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>完全等同于等同长度字节的nop，但是却能干扰IDA的反编译器。</p><p>其他</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.text:000000000040166F 018 49 C7 C0 0D 00 00 00    mov     r8, 0Dh</span><br><span class="line">.text:0000000000401676 018 E8 00 00 00 00          call    $+5</span><br><span class="line">.text:000000000040167B 020 41 59                   pop     r9</span><br><span class="line">.text:000000000040167D 018 4D 01 C1                add     r9, r8</span><br><span class="line">.text:0000000000401680 018 41 51                   push    r9</span><br><span class="line">.text:0000000000401682 020 C3                      retn</span><br><span class="line"></span><br><span class="line">.text:0000000000401683 48 89 EC                    mov     rsp, rbp</span><br><span class="line">.text:0000000000401686 5D                          pop     rbp</span><br><span class="line">.text:0000000000401687 C3                          retn</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意寄存器的值</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见-跳转地址-常数&quot;&gt;&lt;a href=&quot;#常见-跳转地址-常数&quot; class=&quot;headerlink&quot; title=&quot;常见 跳转地址+常数&quot;&gt;&lt;/a&gt;常见 跳转地址+常数&lt;/h1&gt;&lt;p&gt;[NSSRound#3 Team]jump_by_jump&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
    <category term="学习笔记" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>华师CTF--hsCTF2021 re部分题解</title>
    <link href="http://example.com/2022/05/17/%E5%8D%8E%E5%B8%88CTF-hsCTF2021-re%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>http://example.com/2022/05/17/%E5%8D%8E%E5%B8%88CTF-hsCTF2021-re%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</id>
    <published>2022-05-17T12:57:37.000Z</published>
    <updated>2022-05-17T14:37:49.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="baigeiRSA"><a href="#baigeiRSA" class="headerlink" title="baigeiRSA"></a>baigeiRSA</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import libnum</span><br><span class="line">from Crypto.Util import number</span><br><span class="line">from secret import flag</span><br><span class="line"></span><br><span class="line">size = <span class="number">128</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = number.getPrime(size)</span><br><span class="line">q = number.getPrime(size)</span><br><span class="line">n = p*q</span><br><span class="line"></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;n = %d&#x27;</span> % n)</span><br><span class="line">print(<span class="string">&#x27;c = %d&#x27;</span> % c)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>真白给</p><p>直接写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">88503001447845031603457048661635807319447136634748350130947825183012205093541</span></span><br><span class="line">c = <span class="number">40876621398366534035989065383910105526025410999058860023908252093679681817257</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">q,p=<span class="number">274539690398523616505159415195049044439</span>,<span class="number">322368694010594584041053487661458382819</span></span><br><span class="line">d=gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m=gmpy2.powmod(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(n2s(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment">#b&#x27;HSCTF&#123;@Zh3n_Ba1_G3i!@&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517213054464.png" alt="image-20220517213054464"></p><h1 id="2-11"><a href="#2-11" class="headerlink" title="2^11"></a>2^11</h1><p>貌似是一个游戏</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517205925560.png" alt="image-20220517205925560"></p><p>用IDA打开</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517210135061.png" alt="image-20220517210135061"></p><p>貌似分要过2020</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517210205848.png" alt="image-20220517210205848"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517210216483.png" alt="image-20220517210216483"></p><p>直接逆向</p><p>EXP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> v1[<span class="number">8</span>]; <span class="comment">// [esp+1Bh] [ebp-4Dh]</span></span><br><span class="line">  <span class="type">char</span> v2[<span class="number">45</span>]; <span class="comment">// [esp+3Bh] [ebp-2Dh] BYREF</span></span><br><span class="line">  <span class="built_in">strcpy</span>(v2, <span class="string">&quot;H4ve_fun_w1th_R3verse_my_friend~&quot;</span>);</span><br><span class="line">  v1[<span class="number">0</span>] = <span class="number">35084334</span>;</span><br><span class="line">  v1[<span class="number">1</span>] = <span class="number">172237604</span>;</span><br><span class="line">  v1[<span class="number">2</span>] = <span class="number">912589932</span>;</span><br><span class="line">  v1[<span class="number">3</span>] = <span class="number">1529221146</span>;</span><br><span class="line">  v1[<span class="number">4</span>] = <span class="number">808261445</span>;</span><br><span class="line">  v1[<span class="number">5</span>] = <span class="number">811404548</span>;</span><br><span class="line">  v1[<span class="number">6</span>] = <span class="number">102305587</span>;</span><br><span class="line">  v1[<span class="number">7</span>] = <span class="number">50397712</span>;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;=<span class="number">31</span>;++i)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%C&quot;</span>,*((BYTE *)v1 + i) ^ v2[i]);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517210911557.png" alt="image-20220517210911557"></p><h1 id="baigeiXor"><a href="#baigeiXor" class="headerlink" title="baigeiXor"></a>baigeiXor</h1><p>ELF文件，直接弄</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517211210042.png" alt="image-20220517211210042"></p><p>有个加密函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517211229865.png" alt="image-20220517211229865"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517211359964.png" alt="image-20220517211359964"></p><p>找到密文存放位置</p><p>直接逆向EXP</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517211616104.png" alt="image-20220517211616104"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> v3[<span class="number">40</span>]; <span class="comment">// [rsp+20h] [rbp-30h] BYREF</span></span><br><span class="line"> <span class="type">char</span> v4[<span class="number">40</span>];</span><br><span class="line"> <span class="type">char</span> v5[<span class="number">40</span>];</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;really_really_ezzzzzzzzz_reverse&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v4, <span class="string">&quot;keep_going_and_you_will_get_it~!&quot;</span>);</span><br><span class="line">  <span class="built_in">strcpy</span>(v5, <span class="string">&quot;!workHardAndYouWillBeSuccessful!&quot;</span>);</span><br><span class="line">   <span class="type">char</span> dst[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0x1B</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x23</span>, <span class="number">0x34</span>, <span class="number">0x65</span>, <span class="number">0x00</span>, <span class="number">0x08</span>, <span class="number">0x22</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x36</span>, <span class="number">0x2C</span>, <span class="number">0x35</span>, <span class="number">0x26</span>, <span class="number">0x33</span>, <span class="number">0x4F</span>, <span class="number">0x0A</span>, <span class="number">0x25</span>, <span class="number">0x7C</span>, </span><br><span class="line">  <span class="number">0x29</span>, <span class="number">0x3F</span>, <span class="number">0x0B</span>, <span class="number">0x23</span>, <span class="number">0x35</span>, <span class="number">0x10</span>, <span class="number">0x03</span>, <span class="number">0x6B</span>, <span class="number">0x0D</span>, <span class="number">0x16</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x18</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">31</span>;++i)&#123;</span><br><span class="line">  dst[i]^=v5[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">31</span>;++i)&#123;</span><br><span class="line">  dst[i]^=v4[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">31</span>;++i)&#123;</span><br><span class="line">  dst[i]^=v3[i];</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,dst[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AstarEstarS"><a href="#AstarEstarS" class="headerlink" title="AstarEstarS"></a>AstarEstarS</h1><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517213258669.png" alt="image-20220517213258669"></p><p>进入关键函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517213409647.png" alt="image-20220517213409647"></p><p>接着分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517213607042.png" alt="image-20220517213607042"></p><p>key貌似</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517220422597.png" alt="image-20220517220422597"> </p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517215419399.png" alt="image-20220517215419399"></p><p>key拿到，动调应该也可以</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="type">char</span> v8[<span class="number">7</span>]=<span class="string">&quot;Tover&quot;</span>;</span><br><span class="line"> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> v7[<span class="number">8</span>];</span><br><span class="line"> <span class="type">char</span> s[<span class="number">16</span>];</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">0x700000020</span>LL;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">0x1600000047</span>LL;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">0x3D0000002D</span>LL;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">0x290000001C</span>LL;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">0x2D00000004</span>LL;</span><br><span class="line">  v7[<span class="number">5</span>] = <span class="number">0xA0000003F</span>LL;</span><br><span class="line">  v7[<span class="number">6</span>] = <span class="number">0x3A0000000F</span>LL;</span><br><span class="line">  v7[<span class="number">7</span>] = <span class="number">0x1B0000002B</span>LL;</span><br><span class="line">  <span class="type">int</span> i;</span><br><span class="line">  <span class="type">int</span>  v1 = <span class="number">1LL</span>;</span><br><span class="line">  <span class="type">int</span> v2= <span class="number">32</span>;</span><br><span class="line">  <span class="type">int</span> v5,v4;</span><br><span class="line"> <span class="keyword">for</span> ( i = <span class="number">84</span>; ; i = *((BYTE *)v8 + (<span class="type">int</span>)(v5 - v4)) )</span><br><span class="line">  &#123;</span><br><span class="line">    s[v1 - <span class="number">1</span>] = v2 ^ i;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">16</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v2 = *((DWORD *)v7 + v1);</span><br><span class="line">    v4 = <span class="number">5</span> * ((<span class="type">unsigned</span> <span class="type">int</span>)v1 / <span class="number">5</span>);</span><br><span class="line">    v5 = v1++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517220119412.png" alt="image-20220517220119412"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517220128523.png" alt="image-20220517220128523"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517221848613.png" alt="image-20220517221848613"></p><p>所以取后八位</p><p>直接逆向</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517222857540.png" alt="image-20220517222857540"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key = <span class="string">&#x27;th1s_is_a_key_YO&#x27;</span></span><br><span class="line"></span><br><span class="line">key = key.encode()</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line">p = AES.new(key, AES.MODE_ECB)</span><br><span class="line">c = <span class="built_in">bytes</span>([<span class="number">211</span>, <span class="number">93</span>, <span class="number">222</span>, <span class="number">166</span>, <span class="number">164</span>, <span class="number">157</span>, <span class="number">25</span>, <span class="number">242</span>, <span class="number">217</span>, <span class="number">199</span>, <span class="number">50</span>, <span class="number">240</span>, <span class="number">62</span>, <span class="number">64</span>, <span class="number">120</span>, <span class="number">233</span>, <span class="number">16</span>, <span class="number">140</span>, <span class="number">140</span>, <span class="number">180</span>, <span class="number">83</span>, <span class="number">119</span>, <span class="number">49</span>, <span class="number">193</span>, <span class="number">191</span>, <span class="number">63</span>, <span class="number">108</span>, <span class="number">93</span>, <span class="number">127</span>, <span class="number">129</span>, <span class="number">140</span>, <span class="number">205</span>,   <span class="number">85</span>, <span class="number">147</span>, <span class="number">50</span>, <span class="number">53</span>, <span class="number">34</span>, <span class="number">172</span>, <span class="number">61</span>, <span class="number">55</span>,    <span class="number">115</span>, <span class="number">44</span>, <span class="number">74</span>, <span class="number">69</span>, <span class="number">210</span>, <span class="number">197</span>, <span class="number">108</span>, <span class="number">175</span>])</span><br><span class="line"><span class="built_in">print</span>(p.decrypt(c))</span><br><span class="line"><span class="string">b&#x27;flag&#123;OH!It_s33ms_th4t_y0u_kn0w_A*E*S!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="FMC-py"><a href="#FMC-py" class="headerlink" title="FMC_py"></a>FMC_py</h1><p>python文件打包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">PS E:\BaiduNetdiskDownload\ctf工具箱\逆向工程winlinux\python打包逆向&gt; python pyinstxtractor.py FMC_py.exe</span><br><span class="line">[+] Processing FMC_py.exe</span><br><span class="line">[+] Pyinstaller version: 2.1+</span><br><span class="line">[+] Python version: 308</span><br><span class="line">[+] Length of package: 7275694 bytes</span><br><span class="line">[+] Found 70 files in CArchive</span><br><span class="line">[+] Beginning extraction...please standby</span><br><span class="line">[+] Possible entry point: pyiboot01_bootstrap.pyc</span><br><span class="line">[+] Possible entry point: pyi_rth_pkgutil.pyc</span><br><span class="line">[+] Possible entry point: pyi_rth_multiprocessing.pyc</span><br><span class="line">[+] Possible entry point: pyi_rth_inspect.pyc</span><br><span class="line">[+] Possible entry point: FMC.pyc</span><br><span class="line">[+] Found 222 files in PYZ archive</span><br><span class="line">[+] Successfully extracted pyinstaller archive: FMC_py.exe</span><br></pre></td></tr></table></figure><p>前16位拿struct的进行还原</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">PS E:\BaiduNetdiskDownload\ctf工具箱\逆向工程winlinux\python打包逆向&gt; uncompyle6.exe FMC.pyc</span><br><span class="line"><span class="comment"># uncompyle6 version 3.8.0</span></span><br><span class="line"><span class="comment"># Python bytecode 3.8.0 (3413)</span></span><br><span class="line"><span class="comment"># Decompiled from: Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)]</span></span><br><span class="line"><span class="comment"># Embedded file name: FMC.py</span></span><br><span class="line"><span class="comment"># Compiled at: 1995-09-28 00:18:56</span></span><br><span class="line"><span class="comment"># Size of source mod 2**32: 272 bytes</span></span><br><span class="line">Instruction context:</span><br><span class="line"></span><br><span class="line"> L.  <span class="number">71</span>        <span class="number">82</span>  LOAD_FAST                <span class="string">&#x27;encrypted&#x27;</span></span><br><span class="line">-&gt;                <span class="number">84</span>  RETURN_VALUE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FMC</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    MorseCode = &#123;<span class="string">&#x27;!&#x27;</span>:<span class="string">&#x27;-.-.--&#x27;</span>,  <span class="string">&#x27;&quot;&#x27;</span>:<span class="string">&#x27;.-..-.&#x27;</span>,  <span class="string">&quot;&#x27;&quot;</span>:<span class="string">&#x27;.----.&#x27;</span>,  <span class="string">&#x27;(&#x27;</span>:<span class="string">&#x27;-.--.&#x27;</span>,  <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;-.--.-&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;,&#x27;</span>:<span class="string">&#x27;--..--&#x27;</span>,  <span class="string">&#x27;-&#x27;</span>:<span class="string">&#x27;-....-&#x27;</span>,  <span class="string">&#x27;.&#x27;</span>:<span class="string">&#x27;.-.-.-&#x27;</span>,  <span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;-----&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;.----&#x27;</span>,  <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;..---&#x27;</span>,  <span class="string">&#x27;3&#x27;</span>:<span class="string">&#x27;...--&#x27;</span>,  <span class="string">&#x27;4&#x27;</span>:<span class="string">&#x27;....-&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;5&#x27;</span>:<span class="string">&#x27;.....&#x27;</span>,  <span class="string">&#x27;6&#x27;</span>:<span class="string">&#x27;-....&#x27;</span>,  <span class="string">&#x27;7&#x27;</span>:<span class="string">&#x27;--...&#x27;</span>,  <span class="string">&#x27;8&#x27;</span>:<span class="string">&#x27;---..&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;9&#x27;</span>:<span class="string">&#x27;----.&#x27;</span>,  <span class="string">&#x27;:&#x27;</span>:<span class="string">&#x27;---...&#x27;</span>,  <span class="string">&#x27;;&#x27;</span>:<span class="string">&#x27;-.-.-.&#x27;</span>,  <span class="string">&#x27;=&#x27;</span>:<span class="string">&#x27;-...-&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;?&#x27;</span>:<span class="string">&#x27;..--..&#x27;</span>,  <span class="string">&#x27;@&#x27;</span>:<span class="string">&#x27;.--.-.&#x27;</span>,  <span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;.-&#x27;</span>,  <span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;-...&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;C&#x27;</span>:<span class="string">&#x27;-.-.&#x27;</span>,  <span class="string">&#x27;D&#x27;</span>:<span class="string">&#x27;-..&#x27;</span>,  <span class="string">&#x27;E&#x27;</span>:<span class="string">&#x27;.&#x27;</span>,  <span class="string">&#x27;F&#x27;</span>:<span class="string">&#x27;..-.&#x27;</span>,  <span class="string">&#x27;G&#x27;</span>:<span class="string">&#x27;--.&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;H&#x27;</span>:<span class="string">&#x27;....&#x27;</span>,  <span class="string">&#x27;I&#x27;</span>:<span class="string">&#x27;..&#x27;</span>,  <span class="string">&#x27;J&#x27;</span>:<span class="string">&#x27;.---&#x27;</span>,  <span class="string">&#x27;K&#x27;</span>:<span class="string">&#x27;-.-&#x27;</span>,  <span class="string">&#x27;L&#x27;</span>:<span class="string">&#x27;.-..&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;M&#x27;</span>:<span class="string">&#x27;--&#x27;</span>,  <span class="string">&#x27;N&#x27;</span>:<span class="string">&#x27;-.&#x27;</span>,  <span class="string">&#x27;O&#x27;</span>:<span class="string">&#x27;---&#x27;</span>,  <span class="string">&#x27;P&#x27;</span>:<span class="string">&#x27;.--.&#x27;</span>,  <span class="string">&#x27;Q&#x27;</span>:<span class="string">&#x27;--.-&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;R&#x27;</span>:<span class="string">&#x27;.-.&#x27;</span>,  <span class="string">&#x27;S&#x27;</span>:<span class="string">&#x27;...&#x27;</span>,  <span class="string">&#x27;T&#x27;</span>:<span class="string">&#x27;-&#x27;</span>,  <span class="string">&#x27;U&#x27;</span>:<span class="string">&#x27;..-&#x27;</span>,  <span class="string">&#x27;V&#x27;</span>:<span class="string">&#x27;...-&#x27;</span>,</span><br><span class="line">     <span class="string">&#x27;W&#x27;</span>:<span class="string">&#x27;.--&#x27;</span>,  <span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;-..-&#x27;</span>,  <span class="string">&#x27;Y&#x27;</span>:<span class="string">&#x27;-.--&#x27;</span>,  <span class="string">&#x27;Z&#x27;</span>:<span class="string">&#x27;--..&#x27;</span>&#125;</span><br><span class="line">    CipherSequence = <span class="string">&#x27;.....-..x.-..--.-x.x..x-.xx-..-.--.x--.-----x-x.-x--xxx..x.-x.xx-.x--x-xxx.xx-&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toMorse</span>(<span class="params">self, src: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        preced_by_letter = <span class="literal">False</span></span><br><span class="line">        preced_by_space = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> src.upper():</span><br><span class="line">            <span class="keyword">if</span> letter <span class="keyword">in</span> self.MorseCode:</span><br><span class="line">                <span class="keyword">if</span> preced_by_letter:</span><br><span class="line">                    result += <span class="string">&#x27;x&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">if</span> preced_by_space:</span><br><span class="line">                        result += <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">                result += self.MorseCode[letter]</span><br><span class="line">                preced_by_letter = <span class="literal">True</span></span><br><span class="line">                preced_by_space = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> letter == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">                    preced_by_space = <span class="literal">True</span></span><br><span class="line">                    preced_by_letter = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(result) != <span class="number">0</span>:</span><br><span class="line">                    result += <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createKey</span>(<span class="params">self, keyphrase: <span class="built_in">str</span>=<span class="string">&#x27;&#x27;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        upper_letters = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> keyphrase.upper():</span><br><span class="line">            <span class="keyword">if</span> letter <span class="keyword">in</span> upper_letters <span class="keyword">and</span> letter <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">                result += letter</span><br><span class="line">            <span class="keyword">for</span> letter <span class="keyword">in</span> upper_letters:</span><br><span class="line">                <span class="keyword">if</span> letter <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">                    result += letter</span><br><span class="line">                <span class="keyword">assert</span> <span class="built_in">len</span>(result) == <span class="number">26</span></span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">morseToKey</span>(<span class="params">self, mcmsg: <span class="built_in">str</span>, key: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(key) == <span class="number">26</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(mcmsg) &gt;= <span class="number">3</span>:</span><br><span class="line">            care_about = mcmsg[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">            <span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.CipherSequence) // <span class="number">3</span>):</span><br><span class="line">                <span class="keyword">if</span> care_about == self.CipherSequence[index * <span class="number">3</span>:index * <span class="number">3</span> + <span class="number">3</span>]:</span><br><span class="line">                    <span class="keyword">return</span> key[index]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">FMCEncrypt</span>(<span class="params">self = <span class="literal">None</span>, src = <span class="literal">None</span>, keyphrase = <span class="literal">None</span></span>):</span><br><span class="line">        mcmsg = self.toMorse(src)</span><br><span class="line">        key = self.createKey(keyphrase)</span><br><span class="line">        encrypted = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        val = self.morseToKey(mcmsg[counter * <span class="number">3</span>:], key)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> val != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            encrypted += val</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;Give me a sentence?\n&#x27;</span>)</span><br><span class="line">    key = <span class="string">&#x27;ToverCrackRSA&#x27;</span></span><br><span class="line">    f = FMC()</span><br><span class="line">    dst = f.FMCEncrypt(flag, key)</span><br><span class="line">    <span class="keyword">if</span> dst == <span class="string">&#x27;BKTAOJOJRJTALTKTCBVTVHFBKTCTCTVRITVBOUVDKGARLTCHVGVTIHFHITIOITCBUFOITC&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congratulations! Here is your flag: flag&#123;&#x27;</span> + flag.lower() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Think more?&#x27;</span>)</span><br></pre></td></tr></table></figure><p>？，我直接懵逼。这直接就字节码了？还分析错误。拿个网站反编译试试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FMC</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    MorseCode = &#123;</span><br><span class="line">        <span class="string">&#x27;!&#x27;</span>: <span class="string">&#x27;-.-.--&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;&quot;&#x27;</span>: <span class="string">&#x27;.-..-.&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;&#x27;&quot;</span>: <span class="string">&#x27;.----.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;(&#x27;</span>: <span class="string">&#x27;-.--.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;)&#x27;</span>: <span class="string">&#x27;-.--.-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;,&#x27;</span>: <span class="string">&#x27;--..--&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;-&#x27;</span>: <span class="string">&#x27;-....-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;.&#x27;</span>: <span class="string">&#x27;.-.-.-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;-----&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;.----&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;..---&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;3&#x27;</span>: <span class="string">&#x27;...--&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;4&#x27;</span>: <span class="string">&#x27;....-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;5&#x27;</span>: <span class="string">&#x27;.....&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;6&#x27;</span>: <span class="string">&#x27;-....&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;7&#x27;</span>: <span class="string">&#x27;--...&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;8&#x27;</span>: <span class="string">&#x27;---..&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;9&#x27;</span>: <span class="string">&#x27;----.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;:&#x27;</span>: <span class="string">&#x27;---...&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;;&#x27;</span>: <span class="string">&#x27;-.-.-.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;=&#x27;</span>: <span class="string">&#x27;-...-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;?&#x27;</span>: <span class="string">&#x27;..--..&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;@&#x27;</span>: <span class="string">&#x27;.--.-.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;A&#x27;</span>: <span class="string">&#x27;.-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;B&#x27;</span>: <span class="string">&#x27;-...&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="string">&#x27;-.-.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: <span class="string">&#x27;-..&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;E&#x27;</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;F&#x27;</span>: <span class="string">&#x27;..-.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;G&#x27;</span>: <span class="string">&#x27;--.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;H&#x27;</span>: <span class="string">&#x27;....&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="string">&#x27;..&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;J&#x27;</span>: <span class="string">&#x27;.---&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;K&#x27;</span>: <span class="string">&#x27;-.-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;L&#x27;</span>: <span class="string">&#x27;.-..&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;M&#x27;</span>: <span class="string">&#x27;--&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;N&#x27;</span>: <span class="string">&#x27;-.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;O&#x27;</span>: <span class="string">&#x27;---&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;P&#x27;</span>: <span class="string">&#x27;.--.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Q&#x27;</span>: <span class="string">&#x27;--.-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;R&#x27;</span>: <span class="string">&#x27;.-.&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;S&#x27;</span>: <span class="string">&#x27;...&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;T&#x27;</span>: <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;U&#x27;</span>: <span class="string">&#x27;..-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;V&#x27;</span>: <span class="string">&#x27;...-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;W&#x27;</span>: <span class="string">&#x27;.--&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;X&#x27;</span>: <span class="string">&#x27;-..-&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Y&#x27;</span>: <span class="string">&#x27;-.--&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Z&#x27;</span>: <span class="string">&#x27;--..&#x27;</span> &#125;</span><br><span class="line">    CipherSequence = <span class="string">&#x27;.....-..x.-..--.-x.x..x-.xx-..-.--.x--.-----x-x.-x--xxx..x.-x.xx-.x--x-xxx.xx-&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toMorse</span>(<span class="params">self = <span class="literal">None</span>, src = <span class="literal">None</span></span>):</span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        preced_by_letter = <span class="literal">False</span></span><br><span class="line">        preced_by_space = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> src.upper():</span><br><span class="line">            result += <span class="string">&#x27;x&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> preced_by_space:</span><br><span class="line">            result += <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">        result += self.MorseCode[letter]</span><br><span class="line">        preced_by_letter = <span class="literal">True</span></span><br><span class="line">        preced_by_space = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> letter == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">            preced_by_space = <span class="literal">True</span></span><br><span class="line">            preced_by_letter = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(result) != <span class="number">0</span>:</span><br><span class="line">                result += <span class="string">&#x27;xx&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createKey</span>(<span class="params">self = <span class="literal">None</span>, keyphrase = <span class="literal">None</span></span>):</span><br><span class="line">        upper_letters = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">        result = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(result) == <span class="number">26</span>:</span><br><span class="line">            <span class="keyword">raise</span> AssertionError</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">morseToKey</span>(<span class="params">self = <span class="literal">None</span>, mcmsg = <span class="literal">None</span>, key = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">len</span>(key) == <span class="number">26</span>:</span><br><span class="line">            <span class="keyword">raise</span> AssertionError</span><br><span class="line">        <span class="keyword">if</span> <span class="literal">None</span>(mcmsg) &gt;= <span class="number">3</span>:</span><br><span class="line">            care_about = mcmsg[<span class="number">0</span>:<span class="number">3</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">FMCEncrypt</span>(<span class="params">self = <span class="literal">None</span>, src = <span class="literal">None</span>, keyphrase = <span class="literal">None</span></span>):</span><br><span class="line">        mcmsg = self.toMorse(src)</span><br><span class="line">        key = self.createKey(keyphrase)</span><br><span class="line">        encrypted = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        counter = <span class="number">0</span></span><br><span class="line">        val = self.morseToKey(mcmsg[counter * <span class="number">3</span>:], key)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> val != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            encrypted += val</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> encrypted</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    flag = <span class="built_in">input</span>(<span class="string">&#x27;Give me a sentence?\n&#x27;</span>)</span><br><span class="line">    key = <span class="string">&#x27;ToverCrackRSA&#x27;</span></span><br><span class="line">    f = FMC()</span><br><span class="line">    dst = f.FMCEncrypt(flag, key)</span><br><span class="line">    <span class="keyword">if</span> dst == <span class="string">&#x27;BKTAOJOJRJTALTKTCBVTVHFBKTCTCTVRITVBOUVDKGARLTCHVGVTIHFHITIOITCBUFOITC&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Congratulations! Here is your flag: flag&#123;&#x27;</span> + flag.lower() + <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Think more?&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这回好了点，直接进行分析。仔细看也有问题</p><p>强行分析不了，应该是我电脑环境的问题，呜呜呜，这次放了。</p><h1 id="Reverse-Fighting"><a href="#Reverse-Fighting" class="headerlink" title="Reverse-Fighting"></a>Reverse-Fighting</h1><p>寄了，不会分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517223456570.png" alt="image-20220517223456570"></p><p>心累今天就这样吧，看了看后面的题好复杂</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;baigeiRSA&quot;&gt;&lt;a href=&quot;#baigeiRSA&quot; class=&quot;headerlink&quot; title=&quot;baigeiRSA&quot;&gt;&lt;/a&gt;baigeiRSA&lt;/h1&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>寝室c++大讨论的问题</title>
    <link href="http://example.com/2022/05/17/%E5%AF%9D%E5%AE%A4c-%E5%A4%A7%E8%AE%A8%E8%AE%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/05/17/%E5%AF%9D%E5%AE%A4c-%E5%A4%A7%E8%AE%A8%E8%AE%BA%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-05-17T10:27:34.000Z</published>
    <updated>2022-05-17T10:55:16.568Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517182802023.png" alt="image-20220517182802023"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517182839112.png" alt="image-20220517182839112"></p><p>复盘：</p><p>先下个结论，答案有问题。故进行讨论</p><p>讨论派 分别分为258.17 和258.18, 268.112</p><p>第一种思路：是正确的由于数据全为int，有现成函数故不需要用模版，</p><p>而fun &lt; int &gt;(2,3)，由于加入了模版调用的&lt; int &gt;故函数模版会生成一个函数。故返回的便是2+3；</p><p>其他思路都不正确</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517184337125.png" alt="image-20220517184337125"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517184503910.png" alt="image-20220517184503910"></p><p>bike1无参数，进入派生类构造，派生类构造调用基类构造，故先输出w，然后轮到派生构造输出E,bike2 相当于给了G，然后还是派生类构造调用基类构造W,然后输出G，接着进行析构函数输出DD</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">public:</span><br><span class="line">Base() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">try &#123;</span><br><span class="line">throw <span class="string">&quot;2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (<span class="type">char</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (<span class="type">char</span>*) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">throw <span class="string">&quot;5&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Base() &#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;6&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fun</span><span class="params">(Base t)</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;7&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Base t; </span><br><span class="line">fun(t);</span><br><span class="line">&#125;</span><br><span class="line">catch(<span class="type">char</span> *)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;8&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">catch (<span class="type">char</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;9&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出1\n4\n8\n，</p><p>先进入t的构造函数输出1\n解决抛出了一个字符串”2”被捕捉了输出”4“，接着抛出”5“被main函数捕捉到输出”8“</p><p>注意析构函数因异常处理而未执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517182802023.png&quot; alt=&quot;image-20220517182802023&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>温故而知新c++书本再次阅读</title>
    <link href="http://example.com/2022/05/17/%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0c-%E4%B9%A6%E6%9C%AC%E5%86%8D%E6%AC%A1%E9%98%85%E8%AF%BB/"/>
    <id>http://example.com/2022/05/17/%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0c-%E4%B9%A6%E6%9C%AC%E5%86%8D%E6%AC%A1%E9%98%85%E8%AF%BB/</id>
    <published>2022-05-17T07:35:01.000Z</published>
    <updated>2022-05-17T10:26:59.395Z</updated>
    
    <content type="html"><![CDATA[<p>前言：本篇是对c++的温故与知新。需要一定基础</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517161403539.png" alt="image-20220517161403539"></p><h1 id="goto的使用"><a href="#goto的使用" class="headerlink" title="goto的使用"></a>goto的使用</h1><p>无论是c还是c++都对其讳莫如深，其实goto也有好用的地方，在多重循坏时，goto就可以轻松出来。但容易被黑客利用，使用goto到想要程序执行的地方</p><h1 id="auto与decltype"><a href="#auto与decltype" class="headerlink" title="auto与decltype"></a>auto与decltype</h1><p>auto 和 decltype 都是类型推断的方式</p><p>区别如下：</p><p>1、auto 是通过编译器计算变量的初始值来推断类型，decltype同样也是通过编译器来分析表达式进而得到它的类型，但是它不用将表达式的值计算出来</p><p>2、编译器推断出来的auto类型可能与初始值类型不同，众多周知，使用引用实际是使用引用的对象，特别是当引用被用作初始值时，真正参与初始化的值其实是引用对象的值，此时编译器以引用对象的类型作为auto的类型，比如对于顶层const，auto会忽略顶层const性质，但是decltype是保留下来的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auto 和 decltype 都是类型推断的方式</span><br><span class="line"></span><br><span class="line">区别如下：</span><br><span class="line"></span><br><span class="line">1、auto 是通过编译器计算变量的初始值来推断类型，decltype同样也是通过编译器来分析表达式进而得到它的类型，但是它不用将表达式的值计算出来</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2、编译器推断出来的auto类型可能与初始值类型不同，众多周知，使用引用实际是使用引用的对象，特别是当引用被用作初始值时，真正参与初始化的值其实是引用对象的值，此时编译器以引用对象的类型作为auto的类型，比如对于顶层const，auto会忽略顶层const性质，但是decltype是保留下来的</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cosnt int ci = 0, &amp;cj = ci;</span><br><span class="line">decltype(ci) x = 0;    //x的类型是const int</span><br><span class="line">deceltype(cj) y = x;     //y的类型是const int&amp;，y绑定到变量x</span><br><span class="line">decltype(cj) z;    //错误，z是一个引用，必须初始化</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//引用从来都作为其所指对象的同义词出现，只有在decltype处是一个例外</span><br><span class="line"></span><br><span class="line">//decltype和引用</span><br><span class="line"></span><br><span class="line">//如果decltype使用的表达式不是一个变量，则decltype返回表达式结果对应的类型，decltype的返回值类型可以是引用类型</span><br><span class="line"></span><br><span class="line">int i =42，*p = &amp;i, &amp;r = i;</span><br><span class="line">decltype(r + 0) b;    //加法的结果时int,因此b是一个未初始化的int</span><br><span class="line">decltype(*p) c;     //错误做法：c是int&amp; 必须初始化</span><br><span class="line"></span><br><span class="line">//如果表达式的内容是解引用操作，则decltype将得到引用类型，解引用指针可以得到指针所指的对象，而且还能给这个对象赋值，因此decltype（*p）的结果类型就是int&amp;，而非int</span><br></pre></td></tr></table></figure><h1 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h1><p>内联函数不是在调用处发生控制转移，而是在编译时将函数体嵌入在每一个调用处，节省参数传递，控制转移等开销。</p><p>需要用 inline 说明</p><p>没有inline说明的函数也可能是内联函数</p><p>递归无法使用内联</p><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><p>两个以上的函数，具有相同的函数名，但是形参的个数或者类型不同，编译器根据形参的个数或者类型和个数的最佳匹配，自动确定调用 哪一个函数</p><p>注意：编译器不以形参名和返回值来区分函数</p><h1 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h1><p>调用一个函数前必须声明其原型，可以很好避免向一个函数传参不正确或类型不正确的参数。返回值同理。</p><h1 id="构造与析构"><a href="#构造与析构" class="headerlink" title="构造与析构"></a>构造与析构</h1><p>有时派生内的构造函数体为空，但并非不做任何事情，它还要负责基类的构造和成员对象的构造</p><ul><li><p>构造作为成员函数，可以访问类的所有的数据成员，内联函数等</p></li><li><p>如果我们没有定义构造函数，那么编译器会自己定义一个缺省的构造</p></li></ul><p>复制构造：本质是用一个以存在的对象，来初始化同类的新对象</p><p>隐含构造的功能就是把每个数据成员复制到新建立的对象中</p><p>下面是复制构造被调用3种情况</p><ul><li> 用类的一个对象去初始化该类的另一个对象</li></ul>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">point a(1,2);</span><br><span class="line">point b(a); //初始化调用</span><br><span class="line">point c = a; //初始化调用</span><br></pre></td></tr></table></figure><ul><li><p>如果函数的形参是类的对象，调用函数时，进行形参和实参结合时。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void f(point p)&#123;</span><br><span class="line">cout&lt;&lt;p.getx()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">point  a(1,2);</span><br><span class="line">f(a);//形参是类的对象，调用函数时调用复制构造</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果返回值是类的对象时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">point f()&#123;</span><br><span class="line">point a(1,2);</span><br><span class="line">return a; 返回值是类的对象时,调用复制构造</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">point  b;</span><br><span class="line">b=f();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>析构函数不接受任何参数，在对象要被销毁时进行调用的</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;前言：本篇是对c++的温故与知新。需要一定基础&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517161403539.png&quot; alt=&quot;image-2022</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++往年试卷上的问题（值得一看）</title>
    <link href="http://example.com/2022/05/17/c-%E5%BE%80%E5%B9%B4%E8%AF%95%E5%8D%B7%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%EF%BC%89/"/>
    <id>http://example.com/2022/05/17/c-%E5%BE%80%E5%B9%B4%E8%AF%95%E5%8D%B7%E4%B8%8A%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%80%BC%E5%BE%97%E4%B8%80%E7%9C%8B%EF%BC%89/</id>
    <published>2022-05-17T06:27:49.000Z</published>
    <updated>2022-05-17T07:26:28.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="练习九"><a href="#练习九" class="headerlink" title="练习九"></a>练习九</h1><ul><li>所有的class可以换成typename，而反过来则不行，说明typename范围更大</li><li>模版成员函数都是模版函数，无论有没有模版参数（虚拟类型参数）</li></ul><h1 id="练习十"><a href="#练习十" class="headerlink" title="练习十"></a>练习十</h1><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517143835788.png" alt="image-20220517143835788"></p><p>析构函数未执行，因为抛出异常后，发生栈的解旋</p><h2 id="多态问题"><a href="#多态问题" class="headerlink" title="多态问题"></a>多态问题</h2><p>编译时多态：模版，重载</p><p>运行时多态：虚函数，指针，引用</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517144337343.png" alt="image-20220517144337343"></p><p>没看到是友元函数，呜呜</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517144427839.png" alt="image-20220517144427839"></p><p>/ 必为双目运算，没仔细读题，错了，啊这。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517144931379.png" alt="image-20220517144931379"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220517145225760.png" alt="image-20220517145225760"></p><h1 id="C-题：关于动态存储分配，下列说法正确的是？"><a href="#C-题：关于动态存储分配，下列说法正确的是？" class="headerlink" title="C++题：关于动态存储分配，下列说法正确的是？"></a>C++题：关于动态存储分配，下列说法正确的是？</h1><p>A、new和delete是C++语言中专门用于动态内存分配和释放的函数<br>B、动态分配的内存空间也可以被初始化<br>C、当系统内存不够时，会自动回收不再使用的内存单元，因此程序中不必用delete释放内存空间<br>D、当动态分配内存失败时，系统会立刻崩溃，因此一定要慎用new</p><p>选项A，错，new 与delete是用于动态平衡分配与释放空间的运算符，不是函数<br>选项B，对，如int *p=new int(5);<br>选项C，错，要使用delete释放空间，系统会统一管理，而不用delete释放的空间，会造成内存泄漏，这种程序用的次数多，会造成内存耗尽<br>选项D，错，不成功，会返回0。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;h1 id=&quot;练习九&quot;&gt;&lt;a href=&quot;#练习九&quot; class=&quot;headerlink&quot; title=&quot;练习九&quot;&gt;&lt;/a&gt;练习九&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;所</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>c++错题2</title>
    <link href="http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c-%E9%94%99%E9%A2%98%E9%9B%862/"/>
    <id>http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c-%E9%94%99%E9%A2%98%E9%9B%862/</id>
    <published>2022-05-16T15:51:40.000Z</published>
    <updated>2022-05-16T15:57:12.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试卷上的错题"><a href="#测试卷上的错题" class="headerlink" title="测试卷上的错题"></a>测试卷上的错题</h1><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516224453420.png" alt="image-20220516224453420"></p><p>我就是菜啦，这种题可以错</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516224536914.png" alt="image-20220516224536914"></p><p>hh，错3次了都</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516224607340.png" alt="image-20220516224607340"></p><p>函数和函数的地位是平等的</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516224826835.png" alt="image-20220516224826835"></p><p>就是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>｛</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">a</span>；</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">b</span>(<span class="title">int</span> <span class="title">n</span>=</span><span class="number">0</span>)&#123;a=n;&#125;</span><br><span class="line"></span><br><span class="line">｝;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">b <span class="title function_">a1</span><span class="params">(<span class="number">3</span>)</span>,a2;</span><br><span class="line">a2 = a1;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这种情况不调用</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225133284.png" alt="image-20220516225133284"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225147380.png" alt="image-20220516225147380"></p><p>看漏了，呜呜呜。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225214730.png" alt="image-20220516225214730"></p><p>hh，这个确实是我知识点盲区</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225720462.png" alt="image-20220516225720462"></p><p>可以用列表初始化</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225806349.png" alt="image-20220516225806349"></p><p>静态数据外面初始化</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225904469.png" alt="image-20220516225904469"></p><p>hh，这个又错一次</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516225926333.png" alt="image-20220516225926333"></p><p>函数的声明extern关键词是可有可无的，因为函数本身不加修饰的话就是extern的。但是引用的时候一样是需要声明的。<br>  而全局变量在外部使用声明时，extern关键词是必须的，如果变量无extern修饰且没有显式的初始化，同样成为变量的定义，因此此时必须加extern，而编译器在此标记存储空间在执行时加载如内存并初始化为0。而局部变量的声明不能有extern的修饰，且局部变量在运行时才在堆栈部分分配内存。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516230233163.png" alt="image-20220516230233163"></p><p>this在成员函数的开始前开始构造，成员的结束后清除</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516230504790.png" alt="image-20220516230504790"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516230524228.png" alt="image-20220516230524228"></p><p>这就是显示运用了</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516230551097.png" alt="image-20220516230551097"></p><p>这个百思不得其解，应该是b，所有就有点说不通了</p><p>比如说对象数组 ，但没加[]</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516231013123.png" alt="image-20220516231013123"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516231632165.png" alt="image-20220516231632165"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516231915317.png" alt="image-20220516231915317"></p><p>有一说一，不能被继承，但可以有派生类调用。</p><p>虚函数可以继承</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516232135757.png" alt="image-20220516232135757"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516232159606.png" alt="image-20220516232159606"></p><p>我的知识点盲区，又被找到了呢！</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516232228797.png" alt="image-20220516232228797"></p><p>之前错过，呜呜呜</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516232253085.png" alt="image-20220516232253085"></p><p>D：构造和析构无法继承</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516232818190.png" alt="image-20220516232818190"></p><p>这个不太懂，没看懂题目意思</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516232853958.png" alt="image-20220516232853958"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span>&#123;</span></span><br><span class="line">  <span class="type">int</span> k ;</span><br><span class="line">  public:</span><br><span class="line">  a(<span class="type">int</span> n=<span class="number">0</span>)&#123;k=n;&#125;</span><br><span class="line">  <span class="type">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> n)</span>&#123;k=n;&#125;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span><span class="type">const</span> &#123;<span class="keyword">return</span> k;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">b</span>:</span>public a&#123;</span><br><span class="line">  protected: <span class="type">int</span> j;</span><br><span class="line">  public: <span class="type">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> m=<span class="number">0</span>,<span class="type">int</span> n=<span class="number">0</span>)</span>&#123;a::<span class="built_in">set</span>(m);j=n;&#125;</span><br><span class="line">  b(<span class="type">int</span> m=<span class="number">0</span>,<span class="type">int</span> n=<span class="number">0</span>)&#123;a::<span class="built_in">set</span>(m);j=n;&#125;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> <span class="type">const</span> &#123;<span class="keyword">return</span> a::get()+j;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"> b <span class="title function_">b1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span>;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;b1.a::get();</span><br><span class="line"> b1.a::<span class="built_in">set</span>(<span class="number">2</span>);</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;b1.a::get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">()</span><span class="type">const</span> </span>&#123;<span class="keyword">return</span> k;&#125;</span><br></pre></td></tr></table></figure><p>这个被派生类覆盖</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> <span class="type">const</span> &#123;<span class="keyword">return</span> a::get()+j;&#125;</span><br></pre></td></tr></table></figure><p>所以继承无 int get()函数，故保护成员为2</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/3b55764f21d804ab.gif" alt="3b55764f21d804ab"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516234922947.png" alt="image-20220516234922947"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516234941978.png" alt="image-20220516234941978"></p><p>叶老板强烈安利</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/182eac54cd8dcd79.jpg" alt="182eac54cd8dcd79"></p><p>好了测试卷就完了，温故而知新</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试卷上的错题&quot;&gt;&lt;a href=&quot;#测试卷上的错题&quot; class=&quot;headerlink&quot; title=&quot;测试卷上的错题&quot;&gt;&lt;/a&gt;测试卷上的错题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://test-1311941730.cos.ap-nanjing.m</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++复习笔记</title>
    <link href="http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2022-05-16-C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/2022-05-16-C++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-05-16T11:20:10.000Z</published>
    <updated>2022-05-16T13:38:04.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-复习笔记"><a href="#C-复习笔记" class="headerlink" title="C++复习笔记"></a>C++复习笔记</h1><h2 id="第2章，c-简单程序设计"><a href="#第2章，c-简单程序设计" class="headerlink" title="第2章，c++简单程序设计"></a>第2章，c++简单程序设计</h2><h3 id="1，c-语言概述"><a href="#1，c-语言概述" class="headerlink" title="1，c++语言概述"></a>1，c++语言概述</h3><h4 id="1，-c-产生"><a href="#1，-c-产生" class="headerlink" title="1， c++产生"></a>1， c++产生</h4><p>优点 ：</p><p>一：</p><p>1 ，语言简洁灵活</p><p>2 ，运算符和数据结构丰富</p><p>3 ， 具有结构化控制语句</p><p>4 ， 程序执行效率高</p><p>5 ， 具有高级语言与汇编语言的优点，可以直接访问物理地址</p><p>二：c++在语言基础上支持面向对象的程序设计，一个通用目的程序设计语言</p><h3 id="2，c-的特点"><a href="#2，c-的特点" class="headerlink" title="2，c++的特点"></a>2，c++的特点</h3><p>一：尽量兼容c</p><p>1,保持c的简洁，高效。接近汇编语言的特点</p><p>2，促进了c++的普及和面向对象技术的广泛应用</p><p>3，不是纯正的面向对象语言；既支持面向过程，又支持面向对象</p><p>二：支持面向对象的方法 </p><p>面向对象思维</p><h3 id="3，c-程序实例"><a href="#3，c-程序实例" class="headerlink" title="3，c++程序实例"></a>3，c++程序实例</h3><p>1,using namespace std;</p><p>2,cout:输出流对象 &lt;&lt;:插入运算符 endl;换行</p><p>3，int main() 语法规定 main()函数 返回int 型</p><h3 id="4，字符集"><a href="#4，字符集" class="headerlink" title="4，字符集"></a>4，字符集</h3><h3 id="5，语法记号"><a href="#5，语法记号" class="headerlink" title="5，语法记号"></a>5，语法记号</h3><h4 id="1，关键字"><a href="#1，关键字" class="headerlink" title="1，关键字"></a>1，关键字</h4><p>c++预先声明的单词</p><h4 id="2，标识符"><a href="#2，标识符" class="headerlink" title="2，标识符"></a>2，标识符</h4><p>1，定义：程序员自定义的单词，变体</p><p>2，构成规则：</p><ul><li><u>以大小写字母或下划线_开始</u></li><li>可以由大小写字母，下划线或数字0~9组成</li><li><u>大小代表不同的表示符</u></li></ul><h4 id="3，文字"><a href="#3，文字" class="headerlink" title="3，文字"></a>3，文字</h4><p>能使用符号表示数据</p><h4 id="4，操作符表示的数据"><a href="#4，操作符表示的数据" class="headerlink" title="4，操作符表示的数据"></a>4，操作符表示的数据</h4><p>实现各种运算符号</p><h4 id="5，分隔符"><a href="#5，分隔符" class="headerlink" title="5，分隔符"></a>5，分隔符</h4><p>（），｛｝，：，；</p><h4 id="6，空格"><a href="#6，空格" class="headerlink" title="6，空格"></a>6，空格</h4><p>1，空格，制表符（Tab）,垂直制表符，换行符，回车符，注释总称</p><p>2，注释 /*    注释 */    ,//从此开始到行尾都为注释</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516213151031.png" alt="image-20220516213143304"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-复习笔记&quot;&gt;&lt;a href=&quot;#C-复习笔记&quot; class=&quot;headerlink&quot; title=&quot;C++复习笔记&quot;&gt;&lt;/a&gt;C++复习笔记&lt;/h1&gt;&lt;h2 id=&quot;第2章，c-简单程序设计&quot;&gt;&lt;a href=&quot;#第2章，c-简单程序设计&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="c++学习" scheme="http://example.com/tags/c-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>DFS BFS 在迷宫题中的运用</title>
    <link href="http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/DFS%EF%BC%8CBFS/"/>
    <id>http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/DFS%EF%BC%8CBFS/</id>
    <published>2022-05-16T11:20:10.000Z</published>
    <updated>2022-05-16T12:36:31.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图的种类"><a href="#图的种类" class="headerlink" title="图的种类"></a>图的种类</h1><p>1，无向图 ：在无向图中，每个定点和其他顶点通过连线连接</p><p>2，有向图 ：有向图中的相连线是有方向的</p><p>3，权重图 ：在权重图中，每条相连线有各自的权重</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516182621418.png" alt="image-20220516182621418"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516182647682.png" alt="image-20220516182647682"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;图的种类&quot;&gt;&lt;a href=&quot;#图的种类&quot; class=&quot;headerlink&quot; title=&quot;图的种类&quot;&gt;&lt;/a&gt;图的种类&lt;/h1&gt;&lt;p&gt;1，无向图 ：在无向图中，每个定点和其他顶点通过连线连接&lt;/p&gt;
&lt;p&gt;2，有向图 ：有向图中的相连线是有方向的&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
    <category term="算法学习" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>c++错题集</title>
    <link href="http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c++%E9%94%99%E9%A2%98%E9%9B%86/"/>
    <id>http://example.com/2022/05/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c++%E9%94%99%E9%A2%98%E9%9B%86/</id>
    <published>2022-05-16T11:20:10.000Z</published>
    <updated>2022-05-16T14:24:05.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="学习通中错题集"><a href="#学习通中错题集" class="headerlink" title="学习通中错题集"></a>学习通中错题集</h1><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214307885.png"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214326127.png" alt="image-20220516214326127"></p><p>这道题之前做错了一次，现在做又错了一次。呜呜呜</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214430909.png" alt="image-20220516214430909"></p><p>构造函数自己定义了后就不生产默认缺参的了</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214518805.png" alt="image-20220516214518805"></p><p>友元关系 1，不可传递  2，单向 3，不可继承</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214614509.png" alt="image-20220516214614509"></p><p>友元函数不是成员函数，但可以访问所以的成员</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214742344.png" alt="image-20220516214742344"></p><p>没毛病</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214830118.png" alt="image-20220516214830118"></p><p>静态成员直接写就好了，主要在类外初始化</p><p>常成员可以用列表初始化</p><p>只能在构造函数这用列表</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516214956622.png" alt="image-20220516214956622"></p><p>常成员只能用常函数，但非常成员却可以调用常函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215053502.png" alt="image-20220516215053502"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215144582.png" alt="image-20220516215144582"></p><p>用对象初始化时，调用复制构造函数与重载=无关。</p><p>顺便一提，重载=只能为类成员函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215337517.png" alt="image-20220516215337517"></p><p>左边基类 = 右边 派生类 符合这个格式就可以</p><p>返回值是基类，故最后派生类要转化成基类，c正确</p><p>而d，把派生类等于基类，错误</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215603838.png" alt="image-20220516215603838"></p><p>保护继承不能直接访问</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215654454.png" alt="image-20220516215654454"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215753517.png" alt="image-20220516215753517"></p><p>– 不用int</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516215906981.png" alt="image-20220516215906981"></p><p>这个要说一下 要在类中定义 ，无需参数，无需返回值，故D错误</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516220043928.png" alt="image-20220516220043928"></p><p>由于基类是虚函数</p><p>继承到派生类，如果有相同的函数会覆盖。故调用的全是派生类的。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516220325846.png" alt="image-20220516220325846"></p><p>B *p=&amp;obj</p><p>同理，有虚函数，有虚函数的则用派生类的，没有的则用基类的</p><p>故为DB</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;学习通中错题集&quot;&gt;&lt;a href=&quot;#学习通中错题集&quot; class=&quot;headerlink&quot; title=&quot;学习通中错题集&quot;&gt;&lt;/a&gt;学习通中错题集&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://test-1311941730.cos.ap-nanjing.m</summary>
      
    
    
    
    
    <category term="c++" scheme="http://example.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>2022Sloth选拔赛</title>
    <link href="http://example.com/2022/05/16/%E9%80%86%E5%90%91/2022Sloth%E9%80%89%E6%8B%94%E8%B5%9B/"/>
    <id>http://example.com/2022/05/16/%E9%80%86%E5%90%91/2022Sloth%E9%80%89%E6%8B%94%E8%B5%9B/</id>
    <published>2022-05-16T07:20:10.000Z</published>
    <updated>2022-05-16T08:30:38.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HSCTF"><a href="#HSCTF" class="headerlink" title="HSCTF"></a>HSCTF</h1><h2 id="checkininin"><a href="#checkininin" class="headerlink" title="checkininin"></a>checkininin</h2><p>直接用IDA打开</p><p>查看伪代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line">_int64 __fastcall <span class="title function_">main</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> **a2, <span class="type">char</span> **a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-B4h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">32</span>]; <span class="comment">// [rsp+10h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">32</span>]; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">31</span>]; <span class="comment">// [rsp+50h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">32</span>]; <span class="comment">// [rsp+6Fh] [rbp-51h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">41</span>]; <span class="comment">// [rsp+8Fh] [rbp-31h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v10; <span class="comment">// [rsp+B8h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v10 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">-119</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">-85</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">3</span>] = <span class="number">85</span>;</span><br><span class="line">  v5[<span class="number">4</span>] = <span class="number">-23</span>;</span><br><span class="line">  v5[<span class="number">5</span>] = <span class="number">-107</span>;</span><br><span class="line">  v5[<span class="number">6</span>] = <span class="number">-58</span>;</span><br><span class="line">  v5[<span class="number">7</span>] = <span class="number">-16</span>;</span><br><span class="line">  v5[<span class="number">8</span>] = <span class="number">124</span>;</span><br><span class="line">  v5[<span class="number">9</span>] = <span class="number">-21</span>;</span><br><span class="line">  v5[<span class="number">10</span>] = <span class="number">28</span>;</span><br><span class="line">  v5[<span class="number">11</span>] = <span class="number">87</span>;</span><br><span class="line">  v5[<span class="number">12</span>] = <span class="number">43</span>;</span><br><span class="line">  v5[<span class="number">13</span>] = <span class="number">30</span>;</span><br><span class="line">  v5[<span class="number">14</span>] = <span class="number">106</span>;</span><br><span class="line">  v5[<span class="number">15</span>] = <span class="number">-18</span>;</span><br><span class="line">  v5[<span class="number">16</span>] = <span class="number">80</span>;</span><br><span class="line">  v5[<span class="number">17</span>] = <span class="number">78</span>;</span><br><span class="line">  v5[<span class="number">18</span>] = <span class="number">-55</span>;</span><br><span class="line">  v5[<span class="number">19</span>] = <span class="number">97</span>;</span><br><span class="line">  v5[<span class="number">20</span>] = <span class="number">124</span>;</span><br><span class="line">  v5[<span class="number">21</span>] = <span class="number">-86</span>;</span><br><span class="line">  v5[<span class="number">22</span>] = <span class="number">98</span>;</span><br><span class="line">  v5[<span class="number">23</span>] = <span class="number">39</span>;</span><br><span class="line">  v5[<span class="number">24</span>] = <span class="number">-74</span>;</span><br><span class="line">  v5[<span class="number">25</span>] = <span class="number">11</span>;</span><br><span class="line">  v5[<span class="number">26</span>] = <span class="number">-31</span>;</span><br><span class="line">  v5[<span class="number">27</span>] = <span class="number">35</span>;</span><br><span class="line">  v5[<span class="number">28</span>] = <span class="number">74</span>;</span><br><span class="line">  v5[<span class="number">29</span>] = <span class="number">24</span>;</span><br><span class="line">  v5[<span class="number">30</span>] = <span class="number">-61</span>;</span><br><span class="line">  v5[<span class="number">31</span>] = <span class="number">74</span>;</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">108</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">-124</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">-80</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">25</span>;</span><br><span class="line">  v6[<span class="number">4</span>] = <span class="number">-16</span>;</span><br><span class="line">  v6[<span class="number">5</span>] = <span class="number">72</span>;</span><br><span class="line">  v6[<span class="number">6</span>] = <span class="number">-5</span>;</span><br><span class="line">  v6[<span class="number">7</span>] = <span class="number">-61</span>;</span><br><span class="line">  v6[<span class="number">8</span>] = <span class="number">-115</span>;</span><br><span class="line">  v6[<span class="number">9</span>] = <span class="number">-120</span>;</span><br><span class="line">  v6[<span class="number">10</span>] = <span class="number">122</span>;</span><br><span class="line">  v6[<span class="number">11</span>] = <span class="number">109</span>;</span><br><span class="line">  v6[<span class="number">12</span>] = <span class="number">-37</span>;</span><br><span class="line">  v6[<span class="number">13</span>] = <span class="number">-87</span>;</span><br><span class="line">  v6[<span class="number">14</span>] = <span class="number">92</span>;</span><br><span class="line">  v6[<span class="number">15</span>] = <span class="number">8</span>;</span><br><span class="line">  v6[<span class="number">16</span>] = <span class="number">10</span>;</span><br><span class="line">  v6[<span class="number">17</span>] = <span class="number">69</span>;</span><br><span class="line">  v6[<span class="number">18</span>] = <span class="number">0x80</span>;</span><br><span class="line">  v6[<span class="number">19</span>] = <span class="number">-27</span>;</span><br><span class="line">  v6[<span class="number">20</span>] = <span class="number">10</span>;</span><br><span class="line">  v6[<span class="number">21</span>] = <span class="number">14</span>;</span><br><span class="line">  v6[<span class="number">22</span>] = <span class="number">-74</span>;</span><br><span class="line">  v6[<span class="number">23</span>] = <span class="number">-96</span>;</span><br><span class="line">  v6[<span class="number">24</span>] = <span class="number">-53</span>;</span><br><span class="line">  v6[<span class="number">25</span>] = <span class="number">30</span>;</span><br><span class="line">  v6[<span class="number">26</span>] = <span class="number">-4</span>;</span><br><span class="line">  v6[<span class="number">27</span>] = <span class="number">114</span>;</span><br><span class="line">  v6[<span class="number">28</span>] = <span class="number">-115</span>;</span><br><span class="line">  v6[<span class="number">29</span>] = <span class="number">84</span>;</span><br><span class="line">  v6[<span class="number">30</span>] = <span class="number">-42</span>;</span><br><span class="line">  v6[<span class="number">31</span>] = <span class="number">23</span>;</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">-96</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">103</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">68</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">-101</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">121</span>;</span><br><span class="line">  v7[<span class="number">5</span>] = <span class="number">-23</span>;</span><br><span class="line">  v7[<span class="number">6</span>] = <span class="number">-65</span>;</span><br><span class="line">  v7[<span class="number">7</span>] = <span class="number">111</span>;</span><br><span class="line">  v7[<span class="number">8</span>] = <span class="number">-96</span>;</span><br><span class="line">  v7[<span class="number">9</span>] = <span class="number">-126</span>;</span><br><span class="line">  v7[<span class="number">10</span>] = <span class="number">46</span>;</span><br><span class="line">  v7[<span class="number">11</span>] = <span class="number">-120</span>;</span><br><span class="line">  v7[<span class="number">12</span>] = <span class="number">-123</span>;</span><br><span class="line">  v7[<span class="number">13</span>] = <span class="number">109</span>;</span><br><span class="line">  v7[<span class="number">14</span>] = <span class="number">-11</span>;</span><br><span class="line">  v7[<span class="number">15</span>] = <span class="number">27</span>;</span><br><span class="line">  v7[<span class="number">16</span>] = <span class="number">-95</span>;</span><br><span class="line">  v7[<span class="number">17</span>] = <span class="number">-7</span>;</span><br><span class="line">  v7[<span class="number">18</span>] = <span class="number">30</span>;</span><br><span class="line">  v7[<span class="number">19</span>] = <span class="number">55</span>;</span><br><span class="line">  v7[<span class="number">20</span>] = <span class="number">127</span>;</span><br><span class="line">  v7[<span class="number">21</span>] = <span class="number">-4</span>;</span><br><span class="line">  v7[<span class="number">22</span>] = <span class="number">-69</span>;</span><br><span class="line">  v7[<span class="number">23</span>] = <span class="number">35</span>;</span><br><span class="line">  v7[<span class="number">24</span>] = <span class="number">-74</span>;</span><br><span class="line">  v7[<span class="number">25</span>] = <span class="number">125</span>;</span><br><span class="line">  v7[<span class="number">26</span>] = <span class="number">7</span>;</span><br><span class="line">  v7[<span class="number">27</span>] = <span class="number">117</span>;</span><br><span class="line">  v7[<span class="number">28</span>] = <span class="number">-113</span>;</span><br><span class="line">  v7[<span class="number">29</span>] = <span class="number">-112</span>;</span><br><span class="line">  v7[<span class="number">30</span>] = <span class="number">-13</span>;</span><br><span class="line">  qmemcpy(v8, <span class="string">&quot;y-;&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v8[<span class="number">3</span>] = <span class="number">-105</span>;</span><br><span class="line">  v8[<span class="number">4</span>] = <span class="number">-93</span>;</span><br><span class="line">  v8[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">  v8[<span class="number">6</span>] = <span class="number">79</span>;</span><br><span class="line">  v8[<span class="number">7</span>] = <span class="number">-35</span>;</span><br><span class="line">  v8[<span class="number">8</span>] = <span class="number">14</span>;</span><br><span class="line">  v8[<span class="number">9</span>] = <span class="number">98</span>;</span><br><span class="line">  v8[<span class="number">10</span>] = <span class="number">-43</span>;</span><br><span class="line">  v8[<span class="number">11</span>] = <span class="number">4</span>;</span><br><span class="line">  v8[<span class="number">12</span>] = <span class="number">-2</span>;</span><br><span class="line">  v8[<span class="number">13</span>] = <span class="number">44</span>;</span><br><span class="line">  v8[<span class="number">14</span>] = <span class="number">-123</span>;</span><br><span class="line">  v8[<span class="number">15</span>] = <span class="number">-100</span>;</span><br><span class="line">  v8[<span class="number">16</span>] = <span class="number">-72</span>;</span><br><span class="line">  v8[<span class="number">17</span>] = <span class="number">-95</span>;</span><br><span class="line">  v8[<span class="number">18</span>] = <span class="number">-83</span>;</span><br><span class="line">  v8[<span class="number">19</span>] = <span class="number">8</span>;</span><br><span class="line">  v8[<span class="number">20</span>] = <span class="number">-20</span>;</span><br><span class="line">  v8[<span class="number">21</span>] = <span class="number">81</span>;</span><br><span class="line">  v8[<span class="number">22</span>] = <span class="number">23</span>;</span><br><span class="line">  v8[<span class="number">23</span>] = <span class="number">61</span>;</span><br><span class="line">  v8[<span class="number">24</span>] = <span class="number">-21</span>;</span><br><span class="line">  v8[<span class="number">25</span>] = <span class="number">-103</span>;</span><br><span class="line">  v8[<span class="number">26</span>] = <span class="number">39</span>;</span><br><span class="line">  v8[<span class="number">27</span>] = <span class="number">72</span>;</span><br><span class="line">  v8[<span class="number">28</span>] = <span class="number">5</span>;</span><br><span class="line">  v8[<span class="number">29</span>] = <span class="number">105</span>;</span><br><span class="line">  v8[<span class="number">30</span>] = <span class="number">-3</span>;</span><br><span class="line">  v8[<span class="number">31</span>] = <span class="number">-71</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v9, <span class="string">&quot;Y&quot;</span>);</span><br><span class="line">  <span class="built_in">memset</span>(&amp;v9[<span class="number">2</span>], <span class="number">0</span>, <span class="number">31</span>);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;Let&#x27;s checkininin------!&quot;</span>);</span><br><span class="line">  __isoc99_scanf(<span class="string">&quot;%32s&quot;</span>, &amp;v9[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v9[i + <span class="number">1</span>] ^= v5[i];</span><br><span class="line">    v9[i + <span class="number">1</span>] ^= v6[i];</span><br><span class="line">    v9[i + <span class="number">1</span>] ^= v7[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">memcmp</span>(&amp;v9[<span class="number">1</span>], &amp;v8[<span class="number">1</span>], <span class="number">32uLL</span>) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Oh, ininin :D&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Oh, outoutout :X&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑比较清晰，直接逆</p><p>EXP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-B4h]</span></span><br><span class="line">  <span class="type">char</span> v5[<span class="number">32</span>]; <span class="comment">// [rsp+10h] [rbp-B0h]</span></span><br><span class="line">  <span class="type">char</span> v6[<span class="number">32</span>]; <span class="comment">// [rsp+30h] [rbp-90h]</span></span><br><span class="line">  <span class="type">char</span> v7[<span class="number">31</span>]; <span class="comment">// [rsp+50h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> v8[<span class="number">34</span>]; <span class="comment">// [rsp+6Fh] [rbp-51h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v9[<span class="number">41</span>]; <span class="comment">// [rsp+8Fh] [rbp-31h] BYREF</span></span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">-119</span>;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">-85</span>;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">3</span>] = <span class="number">85</span>;</span><br><span class="line">  v5[<span class="number">4</span>] = <span class="number">-23</span>;</span><br><span class="line">  v5[<span class="number">5</span>] = <span class="number">-107</span>;</span><br><span class="line">  v5[<span class="number">6</span>] = <span class="number">-58</span>;</span><br><span class="line">  v5[<span class="number">7</span>] = <span class="number">-16</span>;</span><br><span class="line">  v5[<span class="number">8</span>] = <span class="number">124</span>;</span><br><span class="line">  v5[<span class="number">9</span>] = <span class="number">-21</span>;</span><br><span class="line">  v5[<span class="number">10</span>] = <span class="number">28</span>;</span><br><span class="line">  v5[<span class="number">11</span>] = <span class="number">87</span>;</span><br><span class="line">  v5[<span class="number">12</span>] = <span class="number">43</span>;</span><br><span class="line">  v5[<span class="number">13</span>] = <span class="number">30</span>;</span><br><span class="line">  v5[<span class="number">14</span>] = <span class="number">106</span>;</span><br><span class="line">  v5[<span class="number">15</span>] = <span class="number">-18</span>;</span><br><span class="line">  v5[<span class="number">16</span>] = <span class="number">80</span>;</span><br><span class="line">  v5[<span class="number">17</span>] = <span class="number">78</span>;</span><br><span class="line">  v5[<span class="number">18</span>] = <span class="number">-55</span>;</span><br><span class="line">  v5[<span class="number">19</span>] = <span class="number">97</span>;</span><br><span class="line">  v5[<span class="number">20</span>] = <span class="number">124</span>;</span><br><span class="line">  v5[<span class="number">21</span>] = <span class="number">-86</span>;</span><br><span class="line">  v5[<span class="number">22</span>] = <span class="number">98</span>;</span><br><span class="line">  v5[<span class="number">23</span>] = <span class="number">39</span>;</span><br><span class="line">  v5[<span class="number">24</span>] = <span class="number">-74</span>;</span><br><span class="line">  v5[<span class="number">25</span>] = <span class="number">11</span>;</span><br><span class="line">  v5[<span class="number">26</span>] = <span class="number">-31</span>;</span><br><span class="line">  v5[<span class="number">27</span>] = <span class="number">35</span>;</span><br><span class="line">  v5[<span class="number">28</span>] = <span class="number">74</span>;</span><br><span class="line">  v5[<span class="number">29</span>] = <span class="number">24</span>;</span><br><span class="line">  v5[<span class="number">30</span>] = <span class="number">-61</span>;</span><br><span class="line">  v5[<span class="number">31</span>] = <span class="number">74</span>;</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">108</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">-124</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">-80</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = <span class="number">25</span>;</span><br><span class="line">  v6[<span class="number">4</span>] = <span class="number">-16</span>;</span><br><span class="line">  v6[<span class="number">5</span>] = <span class="number">72</span>;</span><br><span class="line">  v6[<span class="number">6</span>] = <span class="number">-5</span>;</span><br><span class="line">  v6[<span class="number">7</span>] = <span class="number">-61</span>;</span><br><span class="line">  v6[<span class="number">8</span>] = <span class="number">-115</span>;</span><br><span class="line">  v6[<span class="number">9</span>] = <span class="number">-120</span>;</span><br><span class="line">  v6[<span class="number">10</span>] = <span class="number">122</span>;</span><br><span class="line">  v6[<span class="number">11</span>] = <span class="number">109</span>;</span><br><span class="line">  v6[<span class="number">12</span>] = <span class="number">-37</span>;</span><br><span class="line">  v6[<span class="number">13</span>] = <span class="number">-87</span>;</span><br><span class="line">  v6[<span class="number">14</span>] = <span class="number">92</span>;</span><br><span class="line">  v6[<span class="number">15</span>] = <span class="number">8</span>;</span><br><span class="line">  v6[<span class="number">16</span>] = <span class="number">10</span>;</span><br><span class="line">  v6[<span class="number">17</span>] = <span class="number">69</span>;</span><br><span class="line">  v6[<span class="number">18</span>] = <span class="number">0x80</span>;</span><br><span class="line">  v6[<span class="number">19</span>] = <span class="number">-27</span>;</span><br><span class="line">  v6[<span class="number">20</span>] = <span class="number">10</span>;</span><br><span class="line">  v6[<span class="number">21</span>] = <span class="number">14</span>;</span><br><span class="line">  v6[<span class="number">22</span>] = <span class="number">-74</span>;</span><br><span class="line">  v6[<span class="number">23</span>] = <span class="number">-96</span>;</span><br><span class="line">  v6[<span class="number">24</span>] = <span class="number">-53</span>;</span><br><span class="line">  v6[<span class="number">25</span>] = <span class="number">30</span>;</span><br><span class="line">  v6[<span class="number">26</span>] = <span class="number">-4</span>;</span><br><span class="line">  v6[<span class="number">27</span>] = <span class="number">114</span>;</span><br><span class="line">  v6[<span class="number">28</span>] = <span class="number">-115</span>;</span><br><span class="line">  v6[<span class="number">29</span>] = <span class="number">84</span>;</span><br><span class="line">  v6[<span class="number">30</span>] = <span class="number">-42</span>;</span><br><span class="line">  v6[<span class="number">31</span>] = <span class="number">23</span>;</span><br><span class="line">  v7[<span class="number">0</span>] = <span class="number">-96</span>;</span><br><span class="line">  v7[<span class="number">1</span>] = <span class="number">103</span>;</span><br><span class="line">  v7[<span class="number">2</span>] = <span class="number">68</span>;</span><br><span class="line">  v7[<span class="number">3</span>] = <span class="number">-101</span>;</span><br><span class="line">  v7[<span class="number">4</span>] = <span class="number">121</span>;</span><br><span class="line">  v7[<span class="number">5</span>] = <span class="number">-23</span>;</span><br><span class="line">  v7[<span class="number">6</span>] = <span class="number">-65</span>;</span><br><span class="line">  v7[<span class="number">7</span>] = <span class="number">111</span>;</span><br><span class="line">  v7[<span class="number">8</span>] = <span class="number">-96</span>;</span><br><span class="line">  v7[<span class="number">9</span>] = <span class="number">-126</span>;</span><br><span class="line">  v7[<span class="number">10</span>] = <span class="number">46</span>;</span><br><span class="line">  v7[<span class="number">11</span>] = <span class="number">-120</span>;</span><br><span class="line">  v7[<span class="number">12</span>] = <span class="number">-123</span>;</span><br><span class="line">  v7[<span class="number">13</span>] = <span class="number">109</span>;</span><br><span class="line">  v7[<span class="number">14</span>] = <span class="number">-11</span>;</span><br><span class="line">  v7[<span class="number">15</span>] = <span class="number">27</span>;</span><br><span class="line">  v7[<span class="number">16</span>] = <span class="number">-95</span>;</span><br><span class="line">  v7[<span class="number">17</span>] = <span class="number">-7</span>;</span><br><span class="line">  v7[<span class="number">18</span>] = <span class="number">30</span>;</span><br><span class="line">  v7[<span class="number">19</span>] = <span class="number">55</span>;</span><br><span class="line">  v7[<span class="number">20</span>] = <span class="number">127</span>;</span><br><span class="line">  v7[<span class="number">21</span>] = <span class="number">-4</span>;</span><br><span class="line">  v7[<span class="number">22</span>] = <span class="number">-69</span>;</span><br><span class="line">  v7[<span class="number">23</span>] = <span class="number">35</span>;</span><br><span class="line">  v7[<span class="number">24</span>] = <span class="number">-74</span>;</span><br><span class="line">  v7[<span class="number">25</span>] = <span class="number">125</span>;</span><br><span class="line">  v7[<span class="number">26</span>] = <span class="number">7</span>;</span><br><span class="line">  v7[<span class="number">27</span>] = <span class="number">117</span>;</span><br><span class="line">  v7[<span class="number">28</span>] = <span class="number">-113</span>;</span><br><span class="line">  v7[<span class="number">29</span>] = <span class="number">-112</span>;</span><br><span class="line">  v7[<span class="number">30</span>] = <span class="number">-13</span>;</span><br><span class="line">  v8[<span class="number">0</span>]=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line">  v8[<span class="number">1</span>]=<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">  v8[<span class="number">2</span>]=<span class="string">&#x27;;&#x27;</span>;</span><br><span class="line">  v8[<span class="number">3</span>] = <span class="number">-105</span>;</span><br><span class="line">  v8[<span class="number">4</span>] = <span class="number">-93</span>;</span><br><span class="line">  v8[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">  v8[<span class="number">6</span>] = <span class="number">79</span>;</span><br><span class="line">  v8[<span class="number">7</span>] = <span class="number">-35</span>;</span><br><span class="line">  v8[<span class="number">8</span>] = <span class="number">14</span>;</span><br><span class="line">  v8[<span class="number">9</span>] = <span class="number">98</span>;</span><br><span class="line">  v8[<span class="number">10</span>] = <span class="number">-43</span>;</span><br><span class="line">  v8[<span class="number">11</span>] = <span class="number">4</span>;</span><br><span class="line">  v8[<span class="number">12</span>] = <span class="number">-2</span>;</span><br><span class="line">  v8[<span class="number">13</span>] = <span class="number">44</span>;</span><br><span class="line">  v8[<span class="number">14</span>] = <span class="number">-123</span>;</span><br><span class="line">  v8[<span class="number">15</span>] = <span class="number">-100</span>;</span><br><span class="line">  v8[<span class="number">16</span>] = <span class="number">-72</span>;</span><br><span class="line">  v8[<span class="number">17</span>] = <span class="number">-95</span>;</span><br><span class="line">  v8[<span class="number">18</span>] = <span class="number">-83</span>;</span><br><span class="line">  v8[<span class="number">19</span>] = <span class="number">8</span>;</span><br><span class="line">  v8[<span class="number">20</span>] = <span class="number">-20</span>;</span><br><span class="line">  v8[<span class="number">21</span>] = <span class="number">81</span>;</span><br><span class="line">  v8[<span class="number">22</span>] = <span class="number">23</span>;</span><br><span class="line">  v8[<span class="number">23</span>] = <span class="number">61</span>;</span><br><span class="line">  v8[<span class="number">24</span>] = <span class="number">-21</span>;</span><br><span class="line">  v8[<span class="number">25</span>] = <span class="number">-103</span>;</span><br><span class="line">  v8[<span class="number">26</span>] = <span class="number">39</span>;</span><br><span class="line">  v8[<span class="number">27</span>] = <span class="number">72</span>;</span><br><span class="line">  v8[<span class="number">28</span>] = <span class="number">5</span>;</span><br><span class="line">  v8[<span class="number">29</span>] = <span class="number">105</span>;</span><br><span class="line">  v8[<span class="number">30</span>] = <span class="number">-3</span>;</span><br><span class="line">  v8[<span class="number">31</span>] = <span class="number">-71</span>;</span><br><span class="line">  v8[<span class="number">33</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; ++i )</span><br><span class="line">  &#123; v8[i + <span class="number">1</span>] ^= v7[i];</span><br><span class="line">    v8[i + <span class="number">1</span>] ^= v6[i];</span><br><span class="line">    v8[i + <span class="number">1</span>] ^= v5[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(v8);</span><br><span class="line"> <span class="comment">//yhsctf&#123;_R34LLY__EZ___XOROROR!!!_F</span></span><br><span class="line"> <span class="comment">//第一位要去掉，最后一位应该是&#125;，由于没给数据不好逆向，根据提示猜测是&#125;</span></span><br><span class="line"> <span class="comment">//所以flag为hsctf&#123;_R34LLY__EZ___XOROROR!!!_&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3ZVW"><a href="#3ZVW" class="headerlink" title="3ZVW"></a>3ZVW</h2><p>用ida打开</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516125120146.png" alt="image-20220516125120146"></p><p>sub_7d1关键函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516125504815.png" alt="image-20220516125504815"></p><p>根据二维数组公式和取flag中的值与4个数进行比较，怀疑是迷宫题</p><p>进入数组</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516130033661.png" alt="image-20220516130033661"></p><p>有点奇怪</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220516130055684.png" alt="image-20220516130055684"></p><p>我们进行猜测</p><p>v3代表行，18是每行的长度</p><p>maze [v3] [v4] </p><p>这一次maze不是存每个点是墙还是路，而是存四周的情况，比如v5=3（即当前值为<code>h</code>）时，就判断<code>(maze[v3][v4] &gt;&gt; v5)</code>（二进制的第3位）是不是1，是的话（二进制为<code>1xxx</code>）说明没有墙，可以通过；否的话（二进制为<code>0xxx</code>）说明有墙，不可通过。</p><p>二进制的第4位为1说明这个点是终点，第0/1/2/3位代表当前点往左/上/右/下的情况。</p><p>太痛苦了，读懂了不会写，有好多可能，枚举每一种可能，终点和过程中都要吻合，我猜会DFS才能做</p><p>官方EXP</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getVal</span>(<span class="params">arr, t</span>):</span><br><span class="line">    <span class="keyword">return</span> arr[t[<span class="number">0</span>]][t[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">walkMaze</span>(<span class="params">maze_data, lens, start, end</span>):</span><br><span class="line">    dirs = [(<span class="number">0</span>,-<span class="number">1</span>), (-<span class="number">1</span>,<span class="number">0</span>), (<span class="number">0</span>,<span class="number">1</span>), (<span class="number">1</span>,<span class="number">0</span>)]</span><br><span class="line">    FLAG_CHAR = [<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;j&#x27;</span>]</span><br><span class="line">    path = [start]</span><br><span class="line">    step = [[<span class="string">&quot;&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(lens)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(lens)]</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(path) != <span class="number">0</span>:</span><br><span class="line">        prev = path[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">del</span> path[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            cur = (prev[<span class="number">0</span>]+dirs[i][<span class="number">0</span>], prev[<span class="number">1</span>]+dirs[i][<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">if</span> getVal(maze_data, prev)&amp;(<span class="number">1</span>&lt;&lt;(<span class="number">3</span>-i)) != <span class="number">0</span> <span class="keyword">and</span> getVal(step, cur) == <span class="string">&quot;&quot;</span>:</span><br><span class="line">                step[cur[<span class="number">0</span>]][cur[<span class="number">1</span>]] = getVal(step, prev) + FLAG_CHAR[i]</span><br><span class="line">                path.append(cur)</span><br><span class="line">    <span class="keyword">return</span> getVal(step, end)</span><br><span class="line"></span><br><span class="line">maze = [<span class="number">0x03</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x09</span>, <span class="number">0x03</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x0A</span>, <span class="number">0x0F</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x0F</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0F</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x03</span>, <span class="number">0x0F</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x08</span>, <span class="number">0x02</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0F</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x0F</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x0D</span>, <span class="number">0x02</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x0E</span>, <span class="number">0x0C</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x01</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0x0F</span>, <span class="number">0x0F</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0E</span>, <span class="number">0x0B</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0F</span>, <span class="number">0x08</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x03</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x07</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x06</span>, <span class="number">0x09</span>, <span class="number">0x03</span>, <span class="number">0x0D</span>, <span class="number">0x17</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x07</span>, <span class="number">0x0A</span>, <span class="number">0x08</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x04</span>, <span class="number">0x07</span>, <span class="number">0x0B</span>, <span class="number">0x08</span>, <span class="number">0x07</span>, <span class="number">0x0A</span>, <span class="number">0x0B</span>, <span class="number">0x0D</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x0A</span>, <span class="number">0x0F</span>, <span class="number">0x09</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x02</span>, <span class="number">0x0C</span>, <span class="number">0x04</span>, <span class="number">0x02</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x06</span>, <span class="number">0x0E</span>, <span class="number">0x08</span>, <span class="number">0x04</span>, <span class="number">0x05</span>, <span class="number">0x06</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0A</span>, <span class="number">0x0C</span>]</span><br><span class="line">a = <span class="number">18</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze)):</span><br><span class="line">    <span class="keyword">if</span> maze[i] &amp; <span class="number">0x10</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">end = (i//a, i%a)</span><br><span class="line">maze = <span class="built_in">list</span>(<span class="built_in">zip</span>(*[<span class="built_in">iter</span>(maze)] * a))</span><br><span class="line">flag = <span class="string">&quot;hsctf&#123;&quot;</span> + walkMaze(maze, a, (<span class="number">1</span>, <span class="number">1</span>), end) + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HSCTF&quot;&gt;&lt;a href=&quot;#HSCTF&quot; class=&quot;headerlink&quot; title=&quot;HSCTF&quot;&gt;&lt;/a&gt;HSCTF&lt;/h1&gt;&lt;h2 id=&quot;checkininin&quot;&gt;&lt;a href=&quot;#checkininin&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>SMC</title>
    <link href="http://example.com/2022/05/15/%E9%80%86%E5%90%91/re_SMC/"/>
    <id>http://example.com/2022/05/15/%E9%80%86%E5%90%91/re_SMC/</id>
    <published>2022-05-15T13:20:10.000Z</published>
    <updated>2022-05-16T03:22:37.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Self-Modifying-Code"><a href="#Self-Modifying-Code" class="headerlink" title="Self-Modifying Code"></a>Self-Modifying Code</h1><p>SMC是英文Self-Modifying Code的缩写形式，顾名思义，就是“代码自修改”也就是说可以在一段代码执行之前先对它进行修改。可以在一段代码执行前对它进行修改。常常利用这个特性，把代码以加密的形式保存在可自行文件中，然后在程序执行的时候进行动态解析。这样我们在采用静态分析时，看到的都是加密的内容，从而阻断了静态调试的可能性。</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/FzWSQ2BgbnrEdJT.png" alt="image-20220515220329943"></p><p>历史上：  SMC技术在DOS时代非常流行，因为DOS时代更接近系统底层。所以即便是现在实现SMC技术，都以汇编码最为方便。</p><p> 利用SMC技术的这个特点，在设计加密方案时，可以把代码以加密形式保存在可执行文件中，然后在程序执行时再动态解密，这样可以有效地对付静态分析。因此要想了解被加密的代码的功能，只有动态跟踪或者分析出解密函数的位置编写程序来解密这些代码。 </p><h2 id="目标特征"><a href="#目标特征" class="headerlink" title="目标特征"></a>目标特征</h2><p>发现无法关键点无法反编译</p><ul><li><p>函数不能构成（Create Function）完整函数；</p></li><li><p>找到关键地方，找不出花之令，查看其它地方，发现地址中被异或了一个常数。</p></li><li><p>基于没有人为干预影响到IDA的自动化分析过程；无法创建完整函数可以料想有非常规代码存在（其他如芯片指令类型错误在此种情形下几乎不可能）；往下观察，可见非指令代码，可以确信有自修改代码；</p></li></ul><p>最好拿汇编试一试，有些情况下伪代码可能会因为表示方式而对解决问题产生一定的误导作用。要注意数据的端存储方式，以保证正确识别<code>flag</code>内容，避免由字符顺序带来的不必要的干扰。</p><h2 id="解题手段"><a href="#解题手段" class="headerlink" title="解题手段"></a>解题手段</h2><h3 id="静态解密"><a href="#静态解密" class="headerlink" title="静态解密"></a>静态解密</h3><p>IDA自带的有IDC和python</p><p>IDC脚本解密     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line">static XorSet()&#123;</span><br><span class="line">  auto addr = 0x00414c3c //填入要解密的字符串的起始地址</span><br><span class="line">  auto i = 0;</span><br><span class="line">  for( i = 0;addr+i&lt;0x00414c7F;++i)&#123; // 循环结束的条件为解密结束地址</span><br><span class="line">         PatchByte(addr+i,Byte(addr+i)^0x7D) //异或的数字根据题目修改     </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">XorSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IDAPython</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def patch(start, end, key):</span><br><span class="line">    n = 0</span><br><span class="line">    while(start + n!=end+1):</span><br><span class="line">        addr = start + n</span><br><span class="line">        PatchByte(addr, Byte(addr)^key[n%len(key)]</span><br><span class="line">        n += 1</span><br><span class="line">    print(&quot;%d Byte has been changed&quot; % n-1)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ida_bytes</span><br><span class="line">for ea in range(0x401266,0x401458+2,4):</span><br><span class="line"> ida_bytes.patch_dword(ea,ida_bytes.get_original_dword(ea)^1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用此手段恢复程序原本逻辑</p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><p>下断点，使程序跑到恰好的位置，此时正好数据结出。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="WUST2021校赛Findit"><a href="#WUST2021校赛Findit" class="headerlink" title="WUST2021校赛Findit"></a>WUST2021校赛Findit</h2><p>用IDA打开</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515223215318.png" alt="image-20220515223215318"></p><p>进入第二个函数</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515222659461.png" alt="image-20220515222659461"></p><p>找到该地址</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515222729814.png" alt="image-20220515222729814"></p><p>发现无法分析</p><p>且花之令利用脏字节构建也未发现，先不管这个</p><p>接着向下分析</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515223035045.png" alt="image-20220515223035045"></p><p>进入</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515231914641.png" alt="image-20220515231914641"></p><p>发现明显的自修改，异或5，明显SMC。如果还看不出可以搜索调用的API</p><p>addres就是无法反编译的地址，这里加密逻辑出来了</p><p>我们使用脚本进行操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;idc.idc&gt;</span><br><span class="line">static XorSet()&#123;</span><br><span class="line">  auto addr = 0x00401500; //填入要解密的字符串的起始地址</span><br><span class="line">  auto i = 0;</span><br><span class="line">  for( i = 0;i&lt;738;++i)&#123; // 循环结束的条件为解密结束地址</span><br><span class="line">         PatchByte(addr+i,Byte(addr+i)^5); //异或的数字根据题目修改     </span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">static main()</span><br><span class="line">&#123;</span><br><span class="line">XorSet();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>x修复后</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515232804772.png" alt="image-20220515232804772"></p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515232740270.png" alt="image-20220515232740270"></p><p>​    </p><p>我们接着进行修复</p><p>使用u，然后c，恢复全部</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515232913948.png" alt="image-20220515232913948"></p><p>然后创建函数</p><p>然后可以看伪代码了</p><p><img src="https://test-1311941730.cos.ap-nanjing.myqcloud.com/image-20220515233147403.png" alt="image-20220515233147403"></p><p>所以EXP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="type">char</span> enflag[<span class="number">20</span>];</span><br><span class="line">  <span class="type">char</span> Str[<span class="number">20</span>];</span><br><span class="line">  <span class="type">char</span> v4[]= <span class="string">&quot;REVERSE&quot;</span>;</span><br><span class="line">     enflag[<span class="number">0</span>] = <span class="number">81</span>;</span><br><span class="line">     enflag[<span class="number">1</span>] = <span class="number">-72</span>;</span><br><span class="line">     enflag[<span class="number">2</span>] = <span class="number">90</span>;</span><br><span class="line">     enflag[<span class="number">3</span>] = <span class="number">18</span>;</span><br><span class="line">     enflag[<span class="number">4</span>] = <span class="number">16</span>;</span><br><span class="line">     enflag[<span class="number">5</span>] = <span class="number">-6</span>;</span><br><span class="line">     enflag[<span class="number">6</span>] = <span class="number">13</span>;</span><br><span class="line">     enflag[<span class="number">7</span>] = <span class="number">35</span>;</span><br><span class="line">     enflag[<span class="number">8</span>] = <span class="number">1</span>;</span><br><span class="line">     enflag[<span class="number">9</span>] = <span class="number">23</span>;</span><br><span class="line">     enflag[<span class="number">10</span>] = <span class="number">8</span>;</span><br><span class="line">     enflag[<span class="number">11</span>] = <span class="number">9</span>;</span><br><span class="line">     enflag[<span class="number">12</span>] = <span class="number">27</span>;</span><br><span class="line">     enflag[<span class="number">13</span>] = <span class="number">0</span>;</span><br><span class="line">     enflag[<span class="number">14</span>] = <span class="number">18</span>;</span><br><span class="line">     enflag[<span class="number">15</span>] = <span class="number">44</span>;</span><br><span class="line">     enflag[<span class="number">16</span>] = <span class="number">-14</span>;</span><br><span class="line">     enflag[<span class="number">17</span>] = <span class="number">18</span>;</span><br><span class="line">     enflag[<span class="number">18</span>] = <span class="number">17</span>;</span><br><span class="line">     enflag[<span class="number">19</span>] = <span class="number">14</span>;</span><br><span class="line">   <span class="type">int</span> v1; <span class="type">int</span> v2;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">20</span>; </span><br><span class="line">    <span class="comment">//v4被运算了要先处理，然后步骤都逆向就行</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span>  k = <span class="number">0</span>; ; ++k )</span><br><span class="line">    &#123; </span><br><span class="line">      v1 = k;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &gt;=<span class="built_in">strlen</span>(v4) )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v4[k] %= <span class="number">64</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="type">int</span>  n = <span class="number">0</span>; n &lt; <span class="number">20</span>; ++n )</span><br><span class="line">    &#123;</span><br><span class="line">       </span><br><span class="line">      <span class="keyword">if</span> ( (v4[n % <span class="number">7</span>] &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        v2 = enflag[n] - <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        v2 = enflag[n] <span class="number">-1</span>;</span><br><span class="line">      </span><br><span class="line">     enflag[n] = v2;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="type">int</span> m = <span class="number">0</span>; len / <span class="number">2</span> &gt; m; ++m )</span><br><span class="line">    &#123; <span class="type">int</span> v5;</span><br><span class="line">      v5 =enflag[len - m - <span class="number">1</span>] ;</span><br><span class="line">      enflag[len - m - <span class="number">1</span>] = enflag[m];</span><br><span class="line">      enflag[m] = v5;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> l = <span class="number">0</span>; l &lt; len; ++l )</span><br><span class="line">     enflag[l] -= v4[l % <span class="number">7</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> j = <span class="number">18</span>; j &gt;=<span class="number">0</span>; --j )</span><br><span class="line">      enflag[j] += enflag[j + <span class="number">1</span>];</span><br><span class="line">       </span><br><span class="line">    <span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">       enflag[i] += <span class="number">64</span>;</span><br><span class="line">       </span><br><span class="line">     enflag[len]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(enflag);</span><br><span class="line">    <span class="comment">//flag&#123;celebrate_you!&#125;</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="下周SMC题目"><a href="#下周SMC题目" class="headerlink" title="下周SMC题目"></a>下周SMC题目</h2><ul><li>KCTF 2021 Spr. 第一题           SMC</li><li>2018网鼎杯SimpleSM        脏字节+SMC</li><li>[AFCTF 2018]smc                  SMC</li><li>[GWCTF 2019]re3                  SMC</li><li>[羊城杯 2020]babyre            SMC+RC4</li><li>[安洵杯 2020]EasyCM          TSL+SMC</li><li>[AFCTF 2021]How2Debug  SMC</li><li>[GKCTF 2020]DbgIsFun    TSL+SMC</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Self-Modifying-Code&quot;&gt;&lt;a href=&quot;#Self-Modifying-Code&quot; class=&quot;headerlink&quot; title=&quot;Self-Modifying Code&quot;&gt;&lt;/a&gt;Self-Modifying Code&lt;/h1&gt;&lt;p&gt;SM</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>控制流平坦化</title>
    <link href="http://example.com/2022/05/14/%E9%80%86%E5%90%91/2022514%20RE%E4%BA%A4%E6%B5%81/"/>
    <id>http://example.com/2022/05/14/%E9%80%86%E5%90%91/2022514%20RE%E4%BA%A4%E6%B5%81/</id>
    <published>2022-05-14T03:20:10.000Z</published>
    <updated>2022-05-16T03:22:06.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="控制流平坦化"><a href="#控制流平坦化" class="headerlink" title="控制流平坦化"></a>控制流平坦化</h1><p>题目</p><p>链接：<a href="https://pan.baidu.com/s/1Uo5dS8lwaB797hzxlWy02w">https://pan.baidu.com/s/1Uo5dS8lwaB797hzxlWy02w</a><br>提取码：acu9</p><h2 id="控制流平坦化的简单原理"><a href="#控制流平坦化的简单原理" class="headerlink" title="控制流平坦化的简单原理"></a>控制流平坦化的简单原理</h2><p>程序可以分块</p><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(choice == <span class="number">1</span>)</span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    n = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>那么就可以看成</p><p><img src="https://s2.loli.net/2022/05/14/byPTVMhwWk3t4jz.png" alt="image-20220514160203172"></p><p>但是在控制流平坦化处理后</p><p><img src="https://s2.loli.net/2022/05/14/iTYvV8EcLnMNtbI.png" alt="image-20220514160352080"></p><p>将会有一个分发器来处理所有块的先后顺序,而不是由程序逻辑来控制,使逆向逻辑变得困难</p><h2 id="控制流平坦化的识别"><a href="#控制流平坦化的识别" class="headerlink" title="控制流平坦化的识别"></a>控制流平坦化的识别</h2><p>拿到题目用ida打开</p><p><img src="https://s2.loli.net/2022/05/14/a3xEuJwLHW9efdr.png" alt="image-20220514160630719"></p><p>会遇到一些永真永假语法</p><p>比如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  while ( v26 == -2072439640 )</span><br><span class="line">  &#123;</span><br><span class="line">    ++v32;</span><br><span class="line">    v26 = 2031187738;</span><br><span class="line">  &#125;</span><br><span class="line">  if ( v26 != -2025406346 )</span><br><span class="line">    break;</span><br><span class="line">  v37 += 2;</span><br><span class="line">  v26 = 1553621579;</span><br><span class="line">&#125;</span><br><span class="line">if ( v26 != -1893316366 )</span><br><span class="line">  break;</span><br></pre></td></tr></table></figure><p>v26是满足其中的某一个赋值语句,但有很多对v26进行判断的语句,很多是不必要执行的,程序中存在混淆</p><p>查看程序流程图(见上图)</p><p>通常采用deflat.py 脚本进行去混淆</p><p>需要安装 angr 库等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> pyvex</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="comment">#import am_graph</span></span><br><span class="line"><span class="keyword">from</span> util <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h2 id="deflat脚本去混淆的使用"><a href="#deflat脚本去混淆的使用" class="headerlink" title="deflat脚本去混淆的使用"></a>deflat脚本去混淆的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python deflat.py -f &lt;filename&gt; --addr &lt;function address&gt;</span><br><span class="line">python .\deflat.py 去混淆的文件 去混淆函数的地址</span><br></pre></td></tr></table></figure><h2 id="例题-BUUCTF-SUCTF2019-hardCPP"><a href="#例题-BUUCTF-SUCTF2019-hardCPP" class="headerlink" title="例题 BUUCTF[SUCTF2019] hardCPP"></a>例题 BUUCTF[SUCTF2019] hardCPP</h2><p>用IDA打开</p><p>发现是控制流平坦化的题</p><p>找到main函数的地址</p><p><img src="https://s2.loli.net/2022/05/14/U35nHBezOELZsIT.png" alt="image-20220514163953445"></p><p>记录下来地址0x04007E0</p><p>使用deflat.py进行去混淆</p><p>使用语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\deflat.py hardCpp 0x04007E0</span><br></pre></td></tr></table></figure><p>等几分钟</p><p><img src="https://s2.loli.net/2022/05/14/mS631U2JdtuY9qa.png" alt="image-20220514164431285"></p><p>出现这个文件，就是去混淆后的文件了</p><p>打开文件</p><p><img src="https://s2.loli.net/2022/05/14/tS6fvKZ3Lj7TNiW.png" alt="image-20220514164804842"></p><p><img src="https://s2.loli.net/2022/05/14/V6rMmKxonvb1Iyz.png" alt="image-20220514164842741"></p><p>进行正常解密，发现依然有少量混淆代码，但可以通过动态调试进行判断</p><p>定位到关键函数</p><p>x,y是bss段的变量，无法知道其值，发现有2段加密，应该一段加密</p><p><img src="https://s2.loli.net/2022/05/14/CD79hUcbZeLS2R1.png" alt="image-20220514164957617"></p><p>分析第一个函数</p><p><img src="https://s2.loli.net/2022/05/14/mGsHTNUOFMIJaut.png" alt="image-20220514165230405"></p><p>发现<img src="https://s2.loli.net/2022/05/14/tsfyJ7ZILla9AVm.png" alt="image-20220514165245668"></p><p>起名</p><p><img src="https://s2.loli.net/2022/05/14/6lROuiI31M9L4ST.png" alt="image-20220514165325130"></p><p>挨个分析</p><p><img src="https://s2.loli.net/2022/05/14/BaZ15zqSCTiU4xR.png" alt="image-20220514170023684"></p><p>分析逻辑</p><p><img src="https://s2.loli.net/2022/05/14/rDPyw6fRleUd2HA.png" alt="image-20220514170053107"></p><p>密文</p><p><img src="https://s2.loli.net/2022/05/14/4wN2u8bEnK9tWX1.png" alt="image-20220514170131410"></p><p>那么EXP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> enc[] =&#123;<span class="number">0xF3</span>, <span class="number">0x2E</span>, <span class="number">0x18</span>, <span class="number">0x36</span>, <span class="number">0xE1</span>, <span class="number">0x4C</span>, <span class="number">0x22</span>, <span class="number">0xD1</span>, <span class="number">0xF9</span>, </span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0x40</span>, <span class="number">0x76</span>, <span class="number">0xF4</span>, <span class="number">0x0E</span>, <span class="number">0x00</span>, <span class="number">0x05</span>, <span class="number">0xA3</span>, <span class="number">0x90</span>, <span class="number">0x0E</span>, <span class="number">0xA5</span>&#125;;</span><br><span class="line">  <span class="type">char</span> flag[<span class="number">22</span>];</span><br><span class="line">    flag[<span class="number">0</span>]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">    flag[<span class="number">21</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;<span class="number">21</span>;i++)&#123;</span><br><span class="line">     flag[i]= ((enc[i<span class="number">-1</span>]^((flag[i<span class="number">-1</span>] ^<span class="number">18</span>)*<span class="number">3</span> +<span class="number">2</span>))-flag[i<span class="number">-1</span>]%<span class="number">7</span>)^<span class="number">0</span>;                      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(flag); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;控制流平坦化&quot;&gt;&lt;a href=&quot;#控制流平坦化&quot; class=&quot;headerlink&quot; title=&quot;控制流平坦化&quot;&gt;&lt;/a&gt;控制流平坦化&lt;/h1&gt;&lt;p&gt;题目&lt;/p&gt;
&lt;p&gt;链接：&lt;a href=&quot;https://pan.baidu.com/s/1Uo5dS8l</summary>
      
    
    
    
    
    <category term="逆向" scheme="http://example.com/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>C++学习笔记</title>
    <link href="http://example.com/2022/03/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c++/"/>
    <id>http://example.com/2022/03/16/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/c++/</id>
    <published>2022-03-16T11:20:10.000Z</published>
    <updated>2022-05-16T13:37:54.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cin.<span class="built_in">getline</span>(数组名，数组规模) 丢弃换行符</span><br><span class="line">cin.<span class="built_in">get</span>(数组名，数组规模) 换行给下一次</span><br><span class="line">cin.<span class="built_in">getline</span>(str,<span class="number">20</span>); hello world\n str: hello world</span><br></pre></td></tr></table></figure><h2 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h2><p>头文件：string,在名字空间std中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">string str1,str2;</span><br><span class="line">string str2=&quot;hello&quot;;</span><br><span class="line">字符串复制</span><br><span class="line">str1 = str2;</span><br><span class="line">str3 = &quot;abcde&quot;;</span><br><span class="line">str2+=str3;把str3的内容链接到str2后面</span><br><span class="line">str3=str1+str2;</span><br><span class="line">字符串输出</span><br><span class="line">输入一个单词 cin&gt;&gt;str2;</span><br><span class="line">输入一行 getline(cin,str3);</span><br></pre></td></tr></table></figure><h2 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h2><h3 id="动态内存申请"><a href="#动态内存申请" class="headerlink" title="动态内存申请"></a>动态内存申请</h3><p>在内存寻找一块大小合适的空间，返回起始地址</p><p>内存没有名字，只有地址，通过指针间接访问</p><h3 id="申请方法"><a href="#申请方法" class="headerlink" title="申请方法"></a>申请方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new 类型           申请一块保存某种数据类型的内存空间，返回申请申请到内存地址</span><br><span class="line">new 类型[]</span><br><span class="line"></span><br><span class="line">int *intp=new int ; 一个整数</span><br><span class="line">int *array = new int [20]; 20个</span><br><span class="line">int *array = new int [n] ;n个，n可以为变量</span><br></pre></td></tr></table></figure><h3 id="内存释放"><a href="#内存释放" class="headerlink" title="内存释放"></a>内存释放</h3><p>通过变量声明的内存会在储存期结束时收回</p><p>动态申请的空间不会被系统主动收回</p><h4 id="释放空间的运算"><a href="#释放空间的运算" class="headerlink" title="释放空间的运算"></a>释放空间的运算</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete 指针</span><br><span class="line">delete [] 指针</span><br></pre></td></tr></table></figure><h4 id="delete的重要性"><a href="#delete的重要性" class="headerlink" title="delete的重要性"></a>delete的重要性</h4><p>没有delete的动态内存一直被该程序占用</p><p>，特别是，程序执行结束，这块空间还被表示被使用，这称为内存泄漏</p><h2 id="动态结构"><a href="#动态结构" class="headerlink" title="动态结构"></a>动态结构</h2><p>运行时通过new申请一个动态的结构变量</p><p>申请动态结构</p><p>结构指针 = new 结构类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">struct a&#123;</span><br><span class="line">char name[20];</span><br><span class="line">float volume;</span><br><span class="line">double price;</span><br><span class="line">&#125;;</span><br><span class="line">a *ptr;</span><br><span class="line">ptr = new a;</span><br><span class="line">释放动态结构</span><br><span class="line">delete 结构指针；</span><br><span class="line">delete ptr;</span><br><span class="line">访问动态结构</span><br><span class="line">(*指针).成员</span><br><span class="line">(*ptr).name</span><br><span class="line">指针-&gt;成员</span><br><span class="line">ptr-&gt;name</span><br></pre></td></tr></table></figure><h2 id="数组的替代品"><a href="#数组的替代品" class="headerlink" title="数组的替代品"></a>数组的替代品</h2><h3 id="1-vector"><a href="#1-vector" class="headerlink" title="1,vector"></a>1,vector</h3><p>动态数组，可以自动调整长度</p><p>用法 包含 头文件vector</p><p>定义时，需要指定出数据类型和规模</p><p>规模可以是变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">vector&lt;double&gt; v2(n); 与数组不同的是：规模用圆括号</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-array"><a href="#2-array" class="headerlink" title="2,array"></a>2,array</h3><p>效率比vector高，规模固定</p><p>c++11</p><p>用法</p><p>包含头文件array</p><p>定义需要指出类型和规模</p><p>规模是常量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">array&lt;int,5&gt; a1;</span><br><span class="line">double s[4] = &#123;1.0,2.3,2.1,4.2&#125;</span><br><span class="line">arrat&lt;double,4&gt; a2=&#123;1.0,2.3,2.1,4.2&#125;</span><br><span class="line">array&lt;double,4&gt; a3;</span><br><span class="line">a3=a2;</span><br><span class="line">c++不检查下标合法范围</span><br><span class="line">s[-2] = 20.3;</span><br></pre></td></tr></table></figure><h2 id="文本文件的输入输出"><a href="#文本文件的输入输出" class="headerlink" title="文本文件的输入输出"></a>文本文件的输入输出</h2><p>包含头文件 fstream</p><p>定义一个文件流对象</p><p>将对象和被访问的文件关联起来</p><p>从文件读数据</p><p>关闭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iosteam&gt;</span><br><span class="line">#include&lt;fstream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123; char a[50];</span><br><span class="line">int year;</span><br><span class="line">doubel dba;</span><br><span class="line">doubel dbb;</span><br><span class="line">ofstream outFlie;</span><br><span class="line">outFlie.open(&quot;test.txt&quot;);</span><br><span class="line">cin.getline(a,50);</span><br><span class="line">outFile&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">coutFile.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从文件里面读数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;fstream&gt;</span><br><span class="line">inFlie.open(filename);filename 为文件名;</span><br><span class="line">if(!inFile.is_open())//检查文件是否存在</span><br><span class="line">&#123;</span><br><span class="line">exit(EXIT_FAILURE);//程序退出</span><br><span class="line">&#125;</span><br><span class="line">inFile&gt;&gt;temp;//读一个数据放入temp,读到EOF结束;</span><br><span class="line">while(inFile.good())//判断是否读取成功</span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">sum+=temp;</span><br><span class="line">inFile&gt;&gt;temp;</span><br><span class="line">&#125;</span><br><span class="line">if(inFile.eof())</span><br><span class="line">&#123;</span><br><span class="line">   //读到eof</span><br><span class="line">&#125;</span><br><span class="line">else if(inFile.fail())</span><br><span class="line">&#123;</span><br><span class="line">   //读到了非法的数据，例子读的是实型结果读到字符串就会这样</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">//正确</span><br><span class="line">&#125;</span><br><span class="line">inFile.close();</span><br></pre></td></tr></table></figure><h2 id="文件概念"><a href="#文件概念" class="headerlink" title="文件概念"></a>文件概念</h2><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>储存在外存储器中的数据集合</p><h3 id="文件与数据流"><a href="#文件与数据流" class="headerlink" title="文件与数据流"></a>文件与数据流</h3><p>从外围设备流入程序叫输入流，输出流同理；</p><p>每个数据流表示一个对象</p><h3 id="文本文件"><a href="#文本文件" class="headerlink" title="文本文件"></a>文本文件</h3><p>每个字节都是一个ASCII字符</p><p>c++将控制台输入输出看成一个文本文件</p><h3 id="从控制台读"><a href="#从控制台读" class="headerlink" title="从控制台读"></a>从控制台读</h3><p>cin&gt;&gt;x;</p><p>cin是istream类的对象;</p><h3 id="写控制台"><a href="#写控制台" class="headerlink" title="写控制台"></a>写控制台</h3><p>cout&lt;&lt;x;</p><p>cout是osteam类的对象</p><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><p>fstream：包含ifstream，ofstream和fstream3个类</p><h2 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h2><p>好处，修改实际参数的值，不想修改加const 与值传递差不多。</p><p>提高参数传递的效率</p><h2 id="引用返回"><a href="#引用返回" class="headerlink" title="引用返回"></a>引用返回</h2><p>类型 &amp;函数名（形式参数表）</p><p>函数时返回变量的别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int a[]=&#123;1,2,3,4,5&#125;;</span><br><span class="line">int &amp;index(int);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">index(2) = 25;</span><br><span class="line">cout&lt;&lt;index(2);</span><br><span class="line">&#125;</span><br><span class="line">int &amp;index(int j)</span><br><span class="line">&#123;</span><br><span class="line">return a[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回类型可以加const ,此时函数不能为左值</p><h2 id="函数默认值注意事项"><a href="#函数默认值注意事项" class="headerlink" title="函数默认值注意事项"></a>函数默认值注意事项</h2><p>函数参数的默认值在原型声明中指定</p><p>不同源文件可以指定不同的默认值，使用函数更灵活</p><p>缺省参数无论有几个，都必须放在参数序列的最后（参数从右边入栈）</p><h2 id="函数模版–定义与使用"><a href="#函数模版–定义与使用" class="headerlink" title="函数模版–定义与使用"></a>函数模版–定义与使用</h2><p>用参数表示函数中的变量类型</p><p>调用时，具体的类型带入，形成一个真正的函数</p><p>作用</p><p>实现通用函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tempate&lt;typename T&gt;</span><br><span class="line">void swap(T &amp;a,T&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">T c =a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line">int a = 5,b = 7 ;</span><br><span class="line">swap(a,b);</span><br><span class="line"></span><br><span class="line">void swap(int , int)//函数模版实例化  </span><br></pre></td></tr></table></figure><h3 id="多个模版参数"><a href="#多个模版参数" class="headerlink" title="多个模版参数"></a>多个模版参数</h3><p>参数之间用逗号分开</p><p>template&lt;template T1,trmplate T2&gt;</p><h3 id="函数模版的使用"><a href="#函数模版的使用" class="headerlink" title="函数模版的使用"></a>函数模版的使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#incldue&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">template&lt;template T&gt;</span><br><span class="line">void swapT(T&amp;a,T&amp;b);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int a = 1,b = 5;</span><br><span class="line">doubel db1 = 2.1,db2=2.3;</span><br><span class="line">swapT(a,b);</span><br><span class="line">swapY(db1,db2);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">tempate&lt;typename T&gt;</span><br><span class="line">void swap(T &amp;a,T&amp;b)</span><br><span class="line">&#123;</span><br><span class="line">T c =a;</span><br><span class="line">a = b;</span><br><span class="line">b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="显示实例化"><a href="#显示实例化" class="headerlink" title="显示实例化"></a>显示实例化</h3><p>使用函数模版，明确指出模版参数的类型</p><p>方法</p><p>调用时，在函数名后指出米板的实际参数</p><p>函数名&lt;模版&gt;{函数的实际参数表}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">temlate&lt;class T1,class T2,class T3&gt;</span><br><span class="line">T3 calc(T1 x,T3 y)</span><br><span class="line">&#123;</span><br><span class="line">return x+y;</span><br><span class="line">&#125;</span><br><span class="line">calc&lt;int,char,char&gt;(5,&#x27;a&#x27;);结果为&#x27;f&#x27;</span><br><span class="line">calc&lt;int,cahr,int&gt;(5,&#x27;a&#x27;);结果为102</span><br></pre></td></tr></table></figure><h3 id="尾置返回类型（c-11"><a href="#尾置返回类型（c-11" class="headerlink" title="尾置返回类型（c++11)"></a>尾置返回类型（c++11)</h3><p>让编译器自动推断返回类型</p><p>格式</p><p>auto 函数名（形式参数表）-&gt;decltypr(表达式)</p><p>temlate&lt;class T1,class T2,class T3&gt;<br>auto calc(T1 x,T3 y)-&gt;decltype(x+y)<br>{<br>return x+y;<br>}</p><p>calc(5,’a’);结果为102</p><h3 id="函数模版的重载"><a href="#函数模版的重载" class="headerlink" title="函数模版的重载"></a>函数模版的重载</h3><p>一组同名的函数的函数模版</p><p>重载函数必须有不同的函数特征标</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template(typename T) void Swap(T &amp;a,T &amp;b);</span><br><span class="line">template(typename T) void Swap(T*a,T *b,int n);</span><br></pre></td></tr></table></figure><h2 id="名字空间"><a href="#名字空间" class="headerlink" title="名字空间"></a>名字空间</h2><p>防止名字冲突</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">namespace A&#123;</span><br><span class="line">int gint ;</span><br><span class="line">double g;</span><br><span class="line">struct str1&#123;....&#125;;</span><br><span class="line">&#125;</span><br><span class="line">namespace B&#123;</span><br><span class="line">int gint ;</span><br><span class="line">double g;</span><br><span class="line">struct str1&#123;....&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="名字的引用"><a href="#名字的引用" class="headerlink" title="名字的引用"></a>名字的引用</h3><p>名字空间名::名字</p><p>A::gint = 7;</p><h3 id="using-声明"><a href="#using-声明" class="headerlink" title="using 声明"></a>using 声明</h3><p>using 名字空间名::成员；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">using A::gint;</span><br><span class="line">cin&gt;&gt;gint;;</span><br></pre></td></tr></table></figure><h3 id="using-编译指令"><a href="#using-编译指令" class="headerlink" title="using 编译指令"></a>using 编译指令</h3><p>using namespace 名字空间名;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main()&#123;</span><br><span class="line">using namespace A;</span><br><span class="line">cin&gt;&gt;gint;//作用main函数</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">using namespace A;</span><br><span class="line">cin&gt;&gt;gint;//全局</span><br></pre></td></tr></table></figure><h2 id="抽象和类"><a href="#抽象和类" class="headerlink" title="抽象和类"></a>抽象和类</h2><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>用户自定义的类型</p><p>类声明：描述数据储存的（数据成员），数据操作（成员函数），</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class&#123;</span><br><span class="line">privat:</span><br><span class="line">私有数据成员</span><br><span class="line">public:</span><br><span class="line">公有的</span><br><span class="line">&#125;；</span><br><span class="line">class 也可以用struct</span><br><span class="line">struct默认是public,class默认private</span><br></pre></td></tr></table></figure><h3 id="成员函数的实现"><a href="#成员函数的实现" class="headerlink" title="成员函数的实现"></a>成员函数的实现</h3><h4 id="存放在一个与接口文件同名的源文件"><a href="#存放在一个与接口文件同名的源文件" class="headerlink" title="存放在一个与接口文件同名的源文件"></a>存放在一个与接口文件同名的源文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iosteam&gt;</span><br><span class="line">#include&quot;stock00.h&quot;必须包含自己的接口文件</span><br><span class="line">void Stoock::acquire(const std::string &amp;c0,long n,double pr)</span><br><span class="line">&#123;</span><br><span class="line">company = co;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="定义成员函数"><a href="#定义成员函数" class="headerlink" title="定义成员函数"></a>定义成员函数</h4><p>用作用域解析运算符::指出函数所属的类，可以访问类的所有成员</p><h4 id="直接定义在类中的函数被作为内联函数"><a href="#直接定义在类中的函数被作为内联函数" class="headerlink" title="直接定义在类中的函数被作为内联函数"></a>直接定义在类中的函数被作为内联函数</h4><h2 id="类的使用"><a href="#类的使用" class="headerlink" title="类的使用"></a>类的使用</h2><p>对象的定义</p><p>Stock s1, sArray[10],*sp;</p><p>对象访问</p><p><strong>成员表示</strong></p><p>对象名.成员</p><p>指针-&gt;成员</p><p><strong>访问限定</strong></p><p>公有成员可以被所有函数访问</p><p>私有成员：只能被自己的成员函数访问</p><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><p>允许对象在定义符初值</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>函数名与类名相同，无返回值，且不能知名返回类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">隐调用</span><br><span class="line">Stock str1(&quot;comp&quot;,20,3.4);</span><br><span class="line">Stock *sp = new Stock (&quot;comp1&quot;,20,3.4);</span><br><span class="line">显调用</span><br><span class="line">Stock st1 =Stock(&quot;comp1&quot;,20,3.4)</span><br><span class="line">Stock str1(&quot;comp&quot;,20,3.4);</span><br><span class="line">str1 = Stock(&quot;comp2&quot;,40,5.4);</span><br></pre></td></tr></table></figure><h2 id="const与类"><a href="#const与类" class="headerlink" title="const与类"></a>const与类</h2><p>const对象</p><p>定义后不能修改的对象</p><p>const对对象的定义</p><p>cosnt MyClass obj(参数表); //必须有初值</p><p>const对象只能调用const成员函数</p><h4 id="不修改数据成员的成员函数"><a href="#不修改数据成员的成员函数" class="headerlink" title="不修改数据成员的成员函数"></a>不修改数据成员的成员函数</h4><p>格式</p><p>返回类型 函数名(形式参数表) const</p><p>一旦被定义成cosnt成员函数，编译器会检查是否修改数据成员。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class&#123;</span><br><span class="line">public:</span><br><span class="line">int getx() const&#123;return 1&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>原则上，修改数据成员值的成员函数就加const.</p><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><h3 id="对对象能用运算符操作"><a href="#对对象能用运算符操作" class="headerlink" title="对对象能用运算符操作"></a>对对象能用运算符操作</h3><p>例如 类A的对象a1,a2,a3</p><p>a1 = a2 + a3;</p><h3 id="运算符重载的限制"><a href="#运算符重载的限制" class="headerlink" title="运算符重载的限制"></a>运算符重载的限制</h3><h4 id="1，不能重载的"><a href="#1，不能重载的" class="headerlink" title="1，不能重载的"></a>1，不能重载的</h4><p>sizeof，？，：</p><h4 id="2，不改变运算符的优先级和结合性"><a href="#2，不改变运算符的优先级和结合性" class="headerlink" title="2，不改变运算符的优先级和结合性"></a>2，不改变运算符的优先级和结合性</h4><h4 id="3，不能运算符的操作个数"><a href="#3，不能运算符的操作个数" class="headerlink" title="3，不能运算符的操作个数"></a>3，不能运算符的操作个数</h4><h4 id="4，不能创建新的运算符"><a href="#4，不能创建新的运算符" class="headerlink" title="4，不能创建新的运算符"></a>4，不能创建新的运算符</h4><h3 id="重载方法"><a href="#重载方法" class="headerlink" title="重载方法"></a>重载方法</h3><p>写一个函数解释某个运算符在某个类中的含义</p><p>我们规定</p><p>重载函数名为</p><p> operator @</p><p>其中 ，@为运算符</p><p>重载 + 为operator+</p><h3 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h3><h4 id="形参个数和类型"><a href="#形参个数和类型" class="headerlink" title="形参个数和类型"></a>形参个数和类型</h4><p>与运算符的运算对象有关</p><p>注意：成员函数有一个隐藏的this，所以函数形式参数个数少算一个</p><p>返回值与根据运算结果一致</p><p>A类的加法函数原型</p><p>A operator+(const A &amp;a)const;</p><p>等价于 *this+a;</p><p>A类的大于比较函数</p><p>bool operator &gt;(const A &amp;a) const;</p><p>等价于 *this&gt;a</p><p>A a,b,c;</p><p>a = b+c;</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>时间计算</p><p>设计一个处理时间的类，提供时间的加法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt; </span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class Time</span><br><span class="line">&#123;</span><br><span class="line">int h;</span><br><span class="line">int m;</span><br><span class="line">public:</span><br><span class="line">Time()&#123;&#125;;</span><br><span class="line">Time (int hh,int mm = 0);</span><br><span class="line">void AddMin(int mm);</span><br><span class="line">void AddHr(int hh);</span><br><span class="line">void Reset(int hh=0,int mm=0);</span><br><span class="line">Time Sum(const Time &amp;t)const;</span><br><span class="line">Time operator+(const Time &amp;t) const;//加入</span><br><span class="line">void Show()const;</span><br><span class="line">&#125;;</span><br><span class="line">void Time::AddMin(int mm)</span><br><span class="line">&#123;</span><br><span class="line">m+=mm;</span><br><span class="line">h+=m/60;</span><br><span class="line">m%=60;</span><br><span class="line">&#125;</span><br><span class="line">void Time::AddHr(int hh)</span><br><span class="line">&#123;</span><br><span class="line">h+=hh;</span><br><span class="line">&#125;</span><br><span class="line">Time Time::Sum(const Time &amp;t) const</span><br><span class="line">&#123;</span><br><span class="line">Time sum;</span><br><span class="line">sum.m=m+t.m;</span><br><span class="line">sum.h=h+t.h+sum.m/60;</span><br><span class="line">sum.m%=60;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line">// Time t1(1,3),t2(0,35),t3;</span><br><span class="line">//t3=t1.sum(t2); 能否表达成 t3 = t1 + t2 ; ???</span><br><span class="line">Time Time ::operator +(const Time &amp;t) const</span><br><span class="line">&#123;</span><br><span class="line">Time sum;</span><br><span class="line">sum.m=m+t.m;</span><br><span class="line">sum.h=h+t.h+sum.m/60;</span><br><span class="line">sum.m%=60;</span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>类的朋友，允许访问私有成员</p><p>友元分类</p><p>友元函数:全局函数</p><p>友元类：另一个类</p><p>友元成员函数：另一个类的成员函数</p><h3 id="友元声明"><a href="#友元声明" class="headerlink" title="友元声明"></a>友元声明</h3><p>在类中声明使用friend创建友元</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">friend int f(double);</span><br><span class="line">friend class B;</span><br><span class="line">friend void C::g(int , int);</span><br><span class="line">....</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>主要用于运算符重载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Time&#123;</span><br><span class="line">friend Time operator+(const Time &amp;t1, const Time &amp;t2)</span><br><span class="line">&#125;;</span><br><span class="line">Time t1,t2,t3;</span><br><span class="line">t3 = t1+t2;</span><br></pre></td></tr></table></figure><h3 id="c重载输出运算符，使对象可以用cout-lt-lt-对象-输出"><a href="#c重载输出运算符，使对象可以用cout-lt-lt-对象-输出" class="headerlink" title="c重载输出运算符，使对象可以用cout&lt;&lt;对象 输出"></a>c重载输出运算符，使对象可以用cout&lt;&lt;对象 输出</h3><p>必须重载为全局函数，因为第一个运算数cout不是正在定义类的对象，而是ostream类的对象</p><p>版本一 缺点不能连续输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void operatror&lt;&lt;(ostream &amp;os,const Time &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">os&lt;&lt;t.hours&lt;&lt;&quot;:&quot;&lt;&lt;t.minutes;</span><br><span class="line">&#125;</span><br><span class="line">Time t1(1,34)</span><br><span class="line">cout&lt;&lt;t1;</span><br><span class="line">声明为友元</span><br><span class="line">//cout&lt;&lt;&quot;t1 = &quot;&lt;&lt;t1&lt;&lt;endl;报错，左边对象的引用</span><br></pre></td></tr></table></figure><p>版本二</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ostream operator&lt;&lt;(ostream &amp;os,const Time &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;t,hours&lt;&lt;&#x27;:&#x27;&lt;&lt;t.minutes;</span><br><span class="line">return os;</span><br><span class="line">&#125;</span><br><span class="line">Time t1(1,43),t2(2,12);</span><br><span class="line">cout&lt;&lt;t1&lt;&lt;&#x27;+&#x27;&lt;&lt;t2&lt;&lt;&#x27;=&#x27;&lt;&lt;t1+t2&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="运算符重载（成员或非成员）"><a href="#运算符重载（成员或非成员）" class="headerlink" title="运算符重载（成员或非成员）"></a>运算符重载（成员或非成员）</h2><h3 id="第一个运算数不是当前类对象时，不能重载成成员函数"><a href="#第一个运算数不是当前类对象时，不能重载成成员函数" class="headerlink" title="第一个运算数不是当前类对象时，不能重载成成员函数"></a>第一个运算数不是当前类对象时，不能重载成成员函数</h3><p>如：&lt;&lt; 和 &gt;&gt;</p><h3 id="当第一个运算数必须当前类对象，一般重载成成员函数"><a href="#当第一个运算数必须当前类对象，一般重载成成员函数" class="headerlink" title="当第一个运算数必须当前类对象，一般重载成成员函数"></a>当第一个运算数必须当前类对象，一般重载成成员函数</h3><p>某些运算符c++规定必须重载成成员函数，如：赋值，函数调用，下标运算符</p><h3 id="重载成成员函数"><a href="#重载成成员函数" class="headerlink" title="重载成成员函数"></a>重载成成员函数</h3><p>函数形式参数个数比运算数少一个</p><p>第一个运算数this指针</p><h3 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h3><p>运算数仅仅作为输入，建议为全局函数</p><p>第一个运算数当前类的对象，成员函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Time&#123;</span><br><span class="line">public:</span><br><span class="line">Time operator+(const Time &amp;t)const</span><br><span class="line">&#125;；</span><br><span class="line">int x;</span><br><span class="line">t3 = t1 +t2;正确</span><br><span class="line">t3 = 2+t1;错误</span><br><span class="line">t3 = x+t1;错误</span><br><span class="line"></span><br><span class="line">class Time&#123;</span><br><span class="line">public:</span><br><span class="line">frined Time operator+(const Time &amp;t1,const Time &amp;t2)</span><br><span class="line">&#125;；</span><br><span class="line">int x;</span><br><span class="line">把x构造成t1的对象</span><br><span class="line">t3 = t1 +t2;正确</span><br><span class="line">t3 = 2+t1;正确</span><br><span class="line">t3 = x+t1;正确</span><br><span class="line">左边一定是对象</span><br><span class="line">class Time&#123;</span><br><span class="line">public:</span><br><span class="line">Time operator+(const Time &amp;t)const</span><br><span class="line">Time &amp;operator+=(const Time &amp;t);</span><br><span class="line">&#125;;</span><br><span class="line">Time:: &amp;Time operator+=(const Time &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">min+=t.min;</span><br><span class="line">h+=t.h+min/60;</span><br><span class="line">min%=60;</span><br><span class="line">return *this;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">t3+=t1;</span><br></pre></td></tr></table></figure><h2 id="拷贝构造与赋值运算符重载一个"><a href="#拷贝构造与赋值运算符重载一个" class="headerlink" title="拷贝构造与赋值运算符重载一个"></a>拷贝构造与赋值运算符重载一个</h2><p>类成员是动态变量</p><h3 id="一个简化版的string类"><a href="#一个简化版的string类" class="headerlink" title="一个简化版的string类"></a>一个简化版的string类</h3><h4 id="提供的操作的操作"><a href="#提供的操作的操作" class="headerlink" title="提供的操作的操作"></a>提供的操作的操作</h4><p>字符串连接</p><p>字符串等于比较</p><p>字符串输出</p><h4 id="设计考虑"><a href="#设计考虑" class="headerlink" title="设计考虑"></a>设计考虑</h4><p>数据成员：用动态数组</p><p>成员函数：</p><p>构造</p><p>析构</p><p>要求的操作：</p><p>用运算符重载实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">String</span>&#123;</span><br><span class="line"><span class="type">char</span>*data;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">String</span> (<span class="type">const</span> <span class="type">char</span> *s=<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">String</span>(<span class="type">const</span> String &amp;other);</span><br><span class="line">~<span class="built_in">String</span>()&#123;<span class="keyword">delete</span> data;&#125;</span><br><span class="line">    String &amp;<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;other);</span><br><span class="line"><span class="keyword">friend</span> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;s1,<span class="type">const</span> String $s2);</span><br><span class="line">frined <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Sting &amp;s1,<span class="type">const</span> String &amp;s2);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp;opertor&lt;&lt;(ostream &amp;os,<span class="type">const</span> String &amp;s1);</span><br><span class="line">&#125;</span><br><span class="line">String::<span class="built_in">Sting</span>(<span class="type">const</span> <span class="type">char</span> *s)</span><br><span class="line">&#123;</span><br><span class="line">len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(s[len]) </span><br><span class="line">len++;</span><br><span class="line">data =<span class="keyword">new</span> <span class="type">char</span>[len+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">data[i] = s[i];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">data[len] =<span class="string">&#x27;\0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">String::<span class="built_in">String</span>(<span class="type">const</span> String&amp;other)</span><br><span class="line">&#123;</span><br><span class="line">    len = other.len;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    data = <span class="keyword">new</span> <span class="type">char</span>[len+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>( i = <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        data[i] = other.data[i];</span><br><span class="line">    data[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">String &amp;String::<span class="keyword">operator</span>=(<span class="type">const</span> String &amp;other)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>==&amp;other) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">delete</span> data;</span><br><span class="line">    len = other.len;</span><br><span class="line">    data = <span class="keyword">new</span> <span class="type">char</span>[len+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i= <span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        data[i] = other.data[i];</span><br><span class="line">    data[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"> String <span class="keyword">operator</span>+(<span class="type">const</span> String &amp;s1,<span class="type">const</span> String $s2)</span><br><span class="line"> &#123;</span><br><span class="line"> String tmp;</span><br><span class="line"> <span class="type">int</span> k,i;</span><br><span class="line"> tmp.len = s1.len+s2.len;</span><br><span class="line"> tmp.data = <span class="keyword">new</span> <span class="type">char</span>[tmp.len+<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">for</span>(k = <span class="number">0</span>;k&lt;s1.len;k++)</span><br><span class="line"> tmp.data[k]= s1.data[k];</span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;s2.len;i++)</span><br><span class="line"> tmp.data[k+i]=s2.data[i];</span><br><span class="line"> tmp.data[tmp.len] =<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"> <span class="keyword">return</span> tmp;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> String &amp;s1,<span class="type">const</span> String &amp;s2)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(s1.len!=s2.len) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="type">int</span> i;</span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;s1.len;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span>(s1.data[i]!=s2.data[i])</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="type">const</span> String &amp;s)</span><br><span class="line"> &#123;</span><br><span class="line"> os&lt;&lt;s.data;</span><br><span class="line"> <span class="keyword">return</span> os;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    String s1=<span class="string">&quot;aaaaa&quot;</span>;</span><br><span class="line">    String s2=<span class="string">&quot;bbbbb&quot;</span>;</span><br><span class="line">    string s3=<span class="string">&quot;ccccc&quot;</span>;</span><br><span class="line">    string s4;</span><br><span class="line">    cout&lt;&lt;s1;</span><br><span class="line">    s4 =s1+s2;</span><br><span class="line">    retutn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有指针指向动态内存空间时，必须定义复制构造函数和赋值运算符重载函数</p><h2 id="静态数据成员"><a href="#静态数据成员" class="headerlink" title="静态数据成员"></a>静态数据成员</h2><p>导入，如果某个类的全部对象有一个数据大家都认可的，</p><p>比如说，一个银行账户中的利率，没必要让全部对象都保存</p><p>我们可以使用静态数据成员</p><h3 id="静态数据成员-1"><a href="#静态数据成员-1" class="headerlink" title="静态数据成员"></a>静态数据成员</h3><p>静态数据成员：整个类所有对象共享的变量</p><p>定义方法：成员前加保留词 static</p><p>静态成员不属于对象的一部分，而是类的一部分</p><p>静态数据成员属于类，因此定义对象时不为其分配空间</p><p>静态数据成员的定义一般出现在类的实现文件中</p><p>定义格式 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">double Saving Account::rate = 0.05;</span><br></pre></td></tr></table></figure><h3 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h3><p>通过作用域操作符从类直接调用，如 SavingAccount::rate</p><p>从对象引用它，例如 SavingAccount有个对象obj，则可以用obj.rate</p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>专门处理静态数据成员，不能处理其他数据成员的函数</p><h3 id="静态数据成员函数声明"><a href="#静态数据成员函数声明" class="headerlink" title="静态数据成员函数声明"></a>静态数据成员函数声明</h3><p>在类定义的函数原型前加上保留词static</p><p>如 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static void SetRate(double newRate)&#123;rate = newRate;&#125;</span><br></pre></td></tr></table></figure><h3 id="静态成员函数没有this指针"><a href="#静态成员函数没有this指针" class="headerlink" title="静态成员函数没有this指针"></a>静态成员函数没有this指针</h3><h3 id="静态成员函数的访问"><a href="#静态成员函数的访问" class="headerlink" title="静态成员函数的访问"></a>静态成员函数的访问</h3><p>类名::静态成员函数名（）</p><p>对象名.静态成员函数名（）</p><h3 id="静态成员函数的实例"><a href="#静态成员函数的实例" class="headerlink" title="静态成员函数的实例"></a>静态成员函数的实例</h3><p>在程序执行的某个时刻，需要指定类的创建对象个数，和现在存活的对象个数</p><p>类的设计</p><p>数据成员：两个静态的数据成员：obj_count和obj_living</p><p>成员函数:在创建一个对象时，对这个2个数各加1</p><p>消亡时，obj——living减1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">类定义文件 sample.h</span><br><span class="line"><span class="meta">#isndef _SAMPLE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SAMPLE_H</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StaticSample</span>&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> obj_count;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> obj_living;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="built_in">StaticSample</span>();</span><br><span class="line"> ~<span class="built_in">StaticSample</span>();</span><br><span class="line"> <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">类实现文件</span><br><span class="line">sample.cpp</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;sample.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> StaticSample::obj_count = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> StaticSample::obj_living = <span class="number">0</span>;</span><br><span class="line">StaticSample::<span class="built_in">StaticSample</span>()</span><br><span class="line">&#123;</span><br><span class="line">obj_count++;</span><br><span class="line">obj_living++;</span><br><span class="line">&#125;</span><br><span class="line">StaticSample::~<span class="built_in">StaticSample</span>()</span><br><span class="line">&#123;</span><br><span class="line">obj_living--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">StaticSample::display</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;总对象:&quot;</span>&lt;&lt;obj_count&lt;&lt;<span class="string">&quot;\t总存活数：&quot;</span>&lt;&lt;obj_living&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>在一个（单继承）或多个（多继承）已有类的基础上，扩展属性性或方法，形成一个更强大的类</p><p>优点：代码重用，重用一个不公开的类</p><p>单继承</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct 派生类：派生方法 基类名</span><br><span class="line">&#123;</span><br><span class="line"> 新增的数据成员；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单俱乐部的会员</p><p>类定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TableTennisPlayer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>;</span><br><span class="line">string fristname;</span><br><span class="line">string lastname;</span><br><span class="line"><span class="type">bool</span> hasTable;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">TableTennisPlayer</span>(<span class="type">const</span> string &amp;fn=<span class="string">&quot;none&quot;</span>,<span class="type">const</span> string &amp; ln=<span class="string">&quot;none&quot;</span>,<span class="type">bool</span> ht = <span class="literal">false</span>);</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Name</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">HasTable</span><span class="params">()</span> <span class="type">const</span></span>&#123;<span class="keyword">return</span> hasTable;&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ReseTable</span><span class="params">(<span class="type">bool</span> v)</span></span>&#123;hasTable = v;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">TableTennisPlayer::<span class="built_in">TableTennisPlayer</span>(<span class="type">const</span> string &amp;fn=<span class="string">&quot;none&quot;</span>,<span class="type">const</span> string &amp; ln = <span class="string">&quot;none&quot;</span>,<span class="type">bool</span> ht = <span class="literal">false</span>) :</span><br><span class="line">fristname（fn),<span class="built_in">lastname</span>(ln),<span class="built_in">hasTable</span>(ht)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TableTennisPlayer::Name</span><span class="params">()</span><span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;lastname&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;firstname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="再设计一个类"><a href="#再设计一个类" class="headerlink" title="再设计一个类"></a>再设计一个类</h3><p>参加过当地锦标赛的会员</p><p>设计考虑</p><p>是一个会员，必须包含会员所有的属性</p><h3 id="增加属性"><a href="#增加属性" class="headerlink" title="增加属性"></a>增加属性</h3><p>比赛排名</p><h3 id="增加行为"><a href="#增加行为" class="headerlink" title="增加行为"></a>增加行为</h3><p>构造参加过锦标赛的会员</p><p>设置排名</p><p>返回排名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RatedPlayer</span>:<span class="keyword">public</span> TableTennisPlayer</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> rating;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">RatedPlayer</span>(<span class="type">unsigned</span> <span class="type">int</span> r = <span class="number">0</span>,<span class="type">const</span> string &amp;fn=<span class="string">&quot;none&quot;</span>,<span class="type">const</span> string &amp;ln = <span class="string">&quot;none&quot;</span>,<span class="type">bool</span> ht = <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">RatedPlayer</span>(<span class="type">unsigned</span> <span class="type">int</span> r,<span class="type">const</span> TableTennisPlayer &amp;tp);</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">int</span> <span class="title">Rating</span><span class="params">()</span> <span class="type">const</span></span>&#123;<span class="keyword">return</span> rating ;&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ResetRating</span> <span class="params">(<span class="type">unsigned</span> <span class="type">int</span> r)</span></span>&#123;rating = r;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//采用公有派生：基类的公有成员成为派生类的公有成员；派生类的方法不能访问基类私有成员</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Name</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">HasTable</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ResetTable</span><span class="params">(<span class="type">bool</span> v)</span></span>;</span><br><span class="line">RatedPlayer::<span class="built_in">RatedPlayer</span>(<span class="type">unsigned</span> <span class="type">int</span> r = <span class="number">0</span>,<span class="type">const</span> string &amp;fn=<span class="string">&quot;none&quot;</span>,<span class="type">const</span> string &amp;ln = <span class="string">&quot;none&quot;</span>,<span class="type">bool</span> ht = <span class="literal">false</span>):<span class="built_in">TableTennisPlayer</span>(fn,ln,ht)</span><br><span class="line">&#123;</span><br><span class="line">    rating = r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">RatedPlayer</span>(<span class="type">unsigned</span> <span class="type">int</span> r,<span class="type">const</span> TableTennisPlayer &amp;tp):</span><br><span class="line"><span class="built_in">TableTennisPlayer</span>(tp),<span class="built_in">rating</span>(r)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重新定义基类的函数"><a href="#重新定义基类的函数" class="headerlink" title="重新定义基类的函数"></a>重新定义基类的函数</h3><p>同一个方法在派生类和基类中有不同的行为</p><p>例如：</p><p>银行系统有2个客户</p><p>基本支票账户</p><p>特殊的支票账户：可以透支</p><p>特殊是一类特殊的账户，可以考虑继承</p><p>都有取款操作，但行为不一样，特殊账户可以透支</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在派生类直接重定义</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>派生类重定义的函数覆盖了基类的同名的函数，即对派生类对象调用这两个函数时，调用的是派生类重定义的函数</p><h3 id="多态和公有继承"><a href="#多态和公有继承" class="headerlink" title="多态和公有继承"></a>多态和公有继承</h3><h4 id="公有继承"><a href="#公有继承" class="headerlink" title="公有继承"></a>公有继承</h4><p>常用的派生方法</p><p>派生是一类特殊的基类</p><p>通常会对某对象（包括基本的，特殊的执行某个操作</p><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>用基类指针或基类对象的引用遍历所有的对象，但基类指针或基类对象只能介绍基类部分，无法介绍派生类的不同行为。</p><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p>virtual ，当基类指针指向的派生类对象，并对指针调用虚函数时，会到派生类中去寻找同原型的函数并执行，如果不存在，则执行基类的函数</p><p>派生类中virtual可以不加，编译默认与基类虚函数同名的函数也是虚函数</p><p>注意</p><p>构造函数不能是虚函数，析构函数建议虚函数，出发不会被当作基类使用</p><p>虚函数有继承性</p><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>纯虚函数，在基类中说明的虚函数，它在该基类中没有定义，但要在的派生类里定义自己的版本，或重新说明纯虚函数</p><h3 id="纯虚函数声明"><a href="#纯虚函数声明" class="headerlink" title="纯虚函数声明"></a>纯虚函数声明</h3><p>virtual 类型 函数名 (参数表) = 0</p><p>实例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class shape&#123;</span><br><span class="line">protected:</span><br><span class="line">double x,y;</span><br><span class="line">public:</span><br><span class="line"> virtual double area() = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>如果一个类中至少有一个纯虚函数，则该类被称为抽象类</p><p>  抽象类使用</p><p> 抽象类只能作为其他类的基类，不能建立抽象类的对象</p><p>可以声明指向指针或引用，此指针可以指向它的派生类，进而实现多态性</p><p>抽象不能作参数类型，函数返回值或者显式转换类型</p><p>提供一种更系统，更加规范的的开发方法</p><p>作为基类，实现运行时多态</p><h2 id="protected成员"><a href="#protected成员" class="headerlink" title="protected成员"></a>protected成员</h2><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><p>一类特殊的私有成员，可以被派生类的成员函数访问</p><p>提高派生类成员函数与基类的数据成员的效率</p><h3 id="包含对象成员的类"><a href="#包含对象成员的类" class="headerlink" title="包含对象成员的类"></a>包含对象成员的类</h3><p>数据成员是另一个类的对象</p><p>反映 hsa-a的关系</p><p>例如，定义一个学生类型，包含的属性</p><p>姓名</p><p>生日  （年，月，日）类组成</p><p>一组成绩 （课程名，分数）类组成</p><p>student无法访问data的私有成员</p><p>birthday的初始化由构造函数的初始化列表完成</p><p>student():birthday (yy,mm.dd)</p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>从多个基类派生</p><p>格式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 派生类名:派生方法 基类名<span class="number">1</span>，派生方法 基类名<span class="number">2</span>，&#123;</span><br><span class="line">    新增的派生类的数据成员</span><br><span class="line">&#125;</span><br><span class="line">例如</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">teacher_doctor</span>:<span class="keyword">public</span> teacher,<span class="keyword">public</span> doctor&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="多重继承要解决的问题"><a href="#多重继承要解决的问题" class="headerlink" title="多重继承要解决的问题"></a>多重继承要解决的问题</h3><p>如何区分从不同基类继承的同名函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class A&#123;</span><br><span class="line">public:</span><br><span class="line">void f();</span><br><span class="line">&#125;;</span><br><span class="line">class B&#123;</span><br><span class="line">public:</span><br><span class="line">void f();</span><br><span class="line">void g();</span><br><span class="line">&#125;</span><br><span class="line">class C:public A,public B&#123;</span><br><span class="line">public:</span><br><span class="line"> void g();覆盖B的g()函数</span><br><span class="line"> void h();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">c x;</span><br><span class="line">x.f()有二义性</span><br><span class="line">从不同的基类中继承了同一个类的多个实例</span><br><span class="line">解决方案1，作用域</span><br><span class="line">x.A::f()</span><br><span class="line">x.B::f()</span><br><span class="line"></span><br><span class="line">解决方法2，重新封装</span><br><span class="line">class C:public A,public B&#123;</span><br><span class="line">public:</span><br><span class="line"> void g();覆盖B的g()函数</span><br><span class="line"> void h();</span><br><span class="line"> void fA()&#123;A::f()&#125;</span><br><span class="line"> void fB()&#123;B::f()&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">class people&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class teacher:public people&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class doctor:public people&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class teacher_doctor:public teacher,public doctor&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">有2个people的实例</span><br><span class="line">解决方法虚基类 virtual</span><br><span class="line">共同派生共享一个基类副本</span><br><span class="line"></span><br><span class="line">class people&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class teacher: virtual public people&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class doctor: virtual public people&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">class teacher_doctor:public teacher,public doctor&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">虚基类由最终的派生类直接构造</span><br><span class="line">techer_doctor构造函数的写法</span><br><span class="line">tercher_doctor(参数表)，people(参数表)，tercher(参数表)，doctor(参数表)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h2><p>代码重用的一种方法</p><p>类模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class T&gt;  template&lt;typename T&gt;</span><br><span class="line">class A</span><br><span class="line">&#123; T x;</span><br><span class="line">public:</span><br><span class="line">A()&#123;x = 0;&#125;</span><br><span class="line">A(T xx)&#123;x=xx;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">类模板方法定义</span><br><span class="line">每个方法都是一个函数模板</span><br><span class="line">类名后加模板参数</span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">bool A&lt;T&gt;::A(T xx)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">类模板的实例化</span><br><span class="line"></span><br><span class="line">用真正的类型代替模板参数，形成一个真正的类</span><br><span class="line"></span><br><span class="line">对象定义</span><br><span class="line">类模板名&lt;实际类型&gt;对象名(实际参数表)；</span><br><span class="line"></span><br><span class="line">对象使用</span><br><span class="line"></span><br><span class="line">与普通对象完全相同</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="非类型参数"><a href="#非类型参数" class="headerlink" title="非类型参数"></a>非类型参数</h3><p>类模板通常被作为容器</p><p>即将相同的存储方案用于不同类型</p><p>容器大小确定时，模板固定</p><h4 id="栈类的设计"><a href="#栈类的设计" class="headerlink" title="栈类的设计"></a>栈类的设计</h4><p>后进先出</p><h4 id="栈的存储"><a href="#栈的存储" class="headerlink" title="栈的存储"></a>栈的存储</h4><p>数组</p><p>链表</p><h4 id="设计一个基于数组的栈，数组大小编译时是一个确定值"><a href="#设计一个基于数组的栈，数组大小编译时是一个确定值" class="headerlink" title="设计一个基于数组的栈，数组大小编译时是一个确定值"></a>设计一个基于数组的栈，数组大小编译时是一个确定值</h4><p>数组：大小作为模板</p><p>非类型参数的注意事项</p><p>实际参数一定是编译时的常量</p><p>只能是整型，枚举，指针类型</p><p>类方法不能修改非类型参数值，也不能引用它的地址</p><h3 id="在普通类的功能一作为基类"><a href="#在普通类的功能一作为基类" class="headerlink" title="在普通类的功能一作为基类"></a>在普通类的功能一作为基类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> n&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArratTP</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">T ar[n];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> T&amp;<span class="keyword">operator</span>[](<span class="type">int</span> i);</span><br><span class="line"><span class="keyword">virtual</span> T <span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>派生类定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">T</span>,<span class="type">int</span> low,<span class="type">int</span> high&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ArraySUB</span>:<span class="keyword">public</span> ArrayTP&lt;T,high-low+<span class="number">1</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">virtual</span> T&amp;<span class="keyword">operator</span>[](<span class="type">int</span> i);</span><br><span class="line"><span class="keyword">virtual</span> T <span class="keyword">operator</span>[](<span class="type">int</span> i) <span class="type">const</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串输入&quot;&gt;&lt;a href=&quot;#字符串输入&quot; class=&quot;headerlink&quot; title=&quot;字符串输入&quot;&gt;&lt;/a&gt;字符串输入&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="c++学习" scheme="http://example.com/tags/c-%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
